00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/17/2018 1:02:11 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00002700                  8  EXIT EQU $2700
00000000  =00000019                  9  PRINT_COUNT EQU 25
00000000                            10  
00000000  =00000010                 11  WORD_SIZE_CONST EQU 16
00000000                            12  
00000000  =00000008                 13  NIBBLES_PER_LONG_CONST EQU 8
00000000  =00000004                 14  BYTES_PER_LONG_CONST EQU 4
00000000  =00000002                 15  WORDS_PER_LONG_CONST EQU 2
00000000                            16  
00000000  =00000000                 17  SIXTEEN_BIT_DISP_CONST EQU $00
00000000  =000000FF                 18  THIRTYTWO_BIT_DISP_CONST EQU $FF
00000000                            19  
00000000                            20  *SIZE CODES
00000000  =00000000                 21  BYTE_CODE EQU 0
00000000  =00000001                 22  WORD_CODE EQU 1
00000000  =00000002                 23  LONG_CODE EQU 2
00000000                            24  
00000000                            25  *ADDRESSING MODES
00000000  =00000000                 26  DATA_REGISTER_CONST     EQU %000
00000000  =00000001                 27  ADDRESS_REGISTER_CONST  EQU %001
00000000  =00000002                 28  NO_INC_DEC_CONST        EQU %010
00000000  =00000003                 29  POST_INC_CONST          EQU %011
00000000  =00000004                 30  PRE_DEC_CONST           EQU %100
00000000  =00000005                 31  D16_AN_CONST            EQU %101
00000000  =00000006                 32  D8_AN_XN_CONST          EQU %110
00000000  =00000007                 33  LITERAL_CONST           EQU %111
00000000                            34  
00000000                            35  *ADDRESSING MODE EXTRA BYTE SPECIFYING REGISTERS
00000000  =00000000                 36  WORD_ADDRESS_CONST      EQU %000
00000000  =00000001                 37  LONG_ADDRESS_CONST      EQU %001
00000000  =00000004                 38  IMMEDIATE_CONST         EQU %100
00000000  =00000002                 39  D16_PC_CONST            EQU %010
00000000  =00000003                 40  D8_PC_XN_CONST          EQU %011
00000000                            41  
00000000                            42  *16 BITS
00000000  =00004E71                 43  NOP_CONST               EQU %0100111001110001
00000000  =00004E75                 44  RTS_CONST               EQU %0100111001110101
00000000                            45  
00000000                            46  *10 BITS
00000000  =00000387                 47  ASL_MEM_CONST           EQU %1110000111         *COMPLETE
00000000  =00000383                 48  ASR_MEM_CONST           EQU %1110000011         *COMPLETE
00000000  =00000022                 49  BCLR_STATIC_CONST       EQU %0000100010         *COMPLETE
00000000  =0000013A                 50  JSR_CONST               EQU %0100111010         *COMPLETE
00000000  =0000038F                 51  LSL_MEM_CONST           EQU %1110001111         *COMPLETE
00000000  =0000038B                 52  LSR_MEM_CONST           EQU %1110001011         *COMPLETE
00000000  =0000039F                 53  ROL_MEM_CONST           EQU %1110011111         *COMPLETE
00000000  =0000039B                 54  ROR_MEM_CONST           EQU %1110011011         *COMPLETE
00000000                            55  
00000000                            56  *9 BITS
00000000  =00000091                 57  MOVEM_REG_TO_MEM_CONST  EQU %010010001          *COMPLETE
00000000  =00000099                 58  MOVEM_MEM_TO_REG_CONST  EQU %010011001          *COMPLETE
00000000                            59  
00000000                            60  *8 BITS
00000000  =00000065                 61  BCS_CONST               EQU %01100101           *COMPLETE                
00000000  =0000006C                 62  BGE_CONST               EQU %01101100           *COMPLETE
00000000  =0000006E                 63  BGT_CONST               EQU %01101110           *COMPLETE
00000000  =0000006F                 64  BLE_CONST               EQU %01101111           *COMPLETE
00000000  =00000063                 65  BLS_CONST               EQU %01100011           *COMPLETE
00000000  =0000006B                 66  BMI_CONST               EQU %01101011           *COMPLETE
00000000  =00000066                 67  BNE_CONST               EQU %01100110           *COMPLETE
00000000  =0000006A                 68  BPL_CONST               EQU %01101010           *COMPLETE
00000000  =00000069                 69  BVS_CONST               EQU %01101001           *COMPLETE
00000000  =00000062                 70  BHI_CONST               EQU %01100010           *COMPLETE
00000000  =00000067                 71  BEQ_CONST               EQU %01100111           *COMPLETE
00000000  =0000006D                 72  BLT_CONST               EQU %01101101           *COMPLETE
00000000  =00000060                 73  BRA_CONST               EQU %01100000           *COMPLETE
00000000  =00000068                 74  BVC_CONST               EQU %01101000           *COMPLETE
00000000                            75  
00000000  =0000000C                 76  CMPI_CONST              EQU %00001100           *COMPLETE
00000000  =00000044                 77  NEG_CONST               EQU %01000100           *COMPLETE
00000000  =00000000                 78  ORI_CONST               EQU %00000000           *COMPLETE
00000000                            79  
00000000                            80  
00000000                            81  *4 BITS
00000000  =0000000D                 82  ADD_CONST               EQU %1101               *COMPLETE
00000000  =0000000E                 83  ASL_ASR_REG_CONST       EQU %1110               *COMPLETE
00000000  =00000000                 84  BCLR_DYNAMIC_CONST      EQU %0000               
00000000  =0000000B                 85  CMP_EOR_CONST           EQU %1011               *COMPLETE
00000000  =00000008                 86  DIVS_WORD_CONST         EQU %1000               *COMPLETE
00000000  =00000004                 87  LEA_CONST               EQU %0100               *COMPLETE               
00000000  =0000000E                 88  LSL_LSR_REG_CONST       EQU %1110               
00000000  =0000000C                 89  MULS_WORD_CONST         EQU %1100               *COMPLETE
00000000  =00000008                 90  OR_CONST                EQU %1000               *COMPLETE              
00000000  =0000000E                 91  ROL_ROR_REG_CONST       EQU %1110               
00000000  =00000009                 92  SUB_CONST               EQU %1001               *COMPLETE
00000000  =00000005                 93  SUBQ_CONST              EQU %0101               *COMPLETE              
00000000                            94  
00000000                            95  *2 BITS
00000000  =00000000                 96  MOVE_CONST EQU %00                          *COMPLETE
00000000                            97  
00000000                            98  *OPMODES
00000000  =00000000                 99  BYTE_TO_DN_CONST EQU %000
00000000  =00000004                100  BYTE_TO_EA_CONST EQU %100
00000000  =00000001                101  WORD_TO_DN_CONST EQU %001
00000000  =00000005                102  WORD_TO_EA_CONST EQU %101
00000000  =00000002                103  LONG_TO_DN_CONST EQU %010
00000000  =00000006                104  LONG_TO_EA_CONST EQU %110
00000000  =00000003                105  WORD_TO_AN_CONST EQU %011
00000000  =00000007                106  LONG_TO_AN_CONST EQU %111
00000000                           107  
00000000                           108  *****2 BIT OPERATIONS: INDIVIDUAL CODES
00000000                           109  
00000000                           110  *MOVE SIZES
00000000  =00000001                111  MOVE_BYTE_CONST EQU %01
00000000  =00000003                112  MOVE_WORD_CONST EQU %11
00000000  =00000002                113  MOVE_LONG_CONST EQU %10
00000000                           114  
00000000                           115  *****4 BIT OPERATIONS: INDIVIDUAL CODES
00000000                           116  
00000000                           117  *ASL/ASR SIZES
00000000  =00000000                118  ASL_ASR_BYTE_CONST EQU %00
00000000  =00000001                119  ASL_ASR_WORD_CONST EQU %01
00000000  =00000002                120  ASL_ASR_LONG_CONST EQU %10
00000000                           121  
00001000                           122      ORG    $1000
00001000                           123  START:                  ; first instruction of program
00001000                           124  ***************************************LOOP CODE****************************************************
00001000                           125  
00001000  4EB9 000010A0            126          JSR INPUT
00001006  47F9 00002C89            127          LEA COUNTER,A3
0000100C  4EB9 00001012            128          JSR IF_BRANCH
00001012                           129  
00001012                           130  IF_BRANCH 
00001012                           131          *MOVEM REGISTER_STORAGE, D2/D3/A3       * LOAD THE VALUE OF D2, D3 FROM MEMORY
00001012  B682                     132          CMP.L D2,D3
00001014  6700 00BE                133          BEQ EXIT_LOOP                        *ARE WE AT THE END OF THE CODE TO DISASSEMBLE?
00001018  B682                     134          CMP.L D2,D3
0000101A  6D00 00B8                135          BLT EXIT_LOOP
0000101E  48B9 0808 00002D26       136          MOVEM D3/A3, REGISTER_STORAGE       * SAVE THE VALUE OF D2, AND D3 IN MEMORY
00001026  4282                     137          CLR.L D2
00001028  4283                     138          CLR.L D3        
0000102A  4EB9 0000103A            139          JSR WHILE_LOOP
00001030  4EB9 00001078            140          JSR PROMPT_MESSAGE
00001036  60DA                     141          BRA IF_BRANCH 
00001038  4E75                     142          RTS
0000103A                           143      
0000103A                           144  WHILE_LOOP
0000103A  0C13 0000                145          CMP.B #0, (A3)                      *A3 STORES LOOP CONDITIONAL COUNTER
0000103E  6700 0038                146          BEQ PROMPT_MESSAGE
00001042  4CB9 0808 00002D26       147          MOVEM REGISTER_STORAGE, D3/A3       * LOAD THE VALUE OF D2 (STARTING ADDRESS), D3 (ENDING ADDRESS), A3 (COUNTER) FROM MEMORY
0000104A  240E                     148          MOVE.L A6,D2
0000104C  B682                     149          CMP.L D2,D3                             *CHECK TO SEE IF WE HAVE FINISHED
0000104E  6700 0084                150          BEQ EXIT_LOOP
00001052  B682                     151          CMP.L D2,D3
00001054  6D00 007E                152          BLT EXIT_LOOP
00001058  48B9 0808 00002D26       153          MOVEM D3/A3, REGISTER_STORAGE       * SAVE THE VALUE OF D2 (STARTING ADDRESS), D3 (ENDING ADDRESS), A3 (COUNTER) FROM MEMORY
00001060  4282                     154          CLR.L D2
00001062  4283                     155          CLR.L D3
00001064  0C13 0000                156          CMP.B #0,(A3)
00001068  6700 000E                157          BEQ PROMPT_MESSAGE                      *AFTER PRINTING REQUISITE NUMBER OF LINES PROMPT USER TO PRINT NEXT SET OF OPCODES
0000106C  4EB9 000010CC            158          JSR PRINT_DISSASSEMBLY                  *PRINT OPCODE
00001072  5313                     159          SUBQ.B #1,(A3)                          *DECREMENT COUNTER
00001074  60C4                     160          BRA WHILE_LOOP
00001076  4E75                     161          RTS
00001078                           162          
00001078                           163  
00001078                           164  PROMPT_MESSAGE
00001078                           165          
00001078  303C 000E                166          MOVE #14,D0                             *PROMPT USER TO PRINT NEXT SET OF OPCODES
0000107C  43F9 00002CEF            167          LEA PROMPT3, A1
00001082  4E4F                     168          TRAP #15
00001084                           169          
00001084                           170          
00001084  303C 0004                171          MOVE #4,D0
00001088  4E4F                     172          TRAP #15
0000108A  B0BC 00000001            173          CMP.L #1,D0
00001090  6700 0042                174          BEQ EXIT_LOOP
00001094                           175          
00001094  13FC 0019 00002C89       176          MOVE.B #25, COUNTER
0000109C  609C                     177          BRA WHILE_LOOP
0000109E  4E75                     178          RTS 
000010A0                           179  
000010A0                           180  INPUT
000010A0  303C 000E                181          MOVE #14,D0
000010A4  43F9 00002CB1            182          LEA PROMPT1, A1
000010AA  4E4F                     183          TRAP #15
000010AC                           184      
000010AC  303C 0004                185          MOVE #4,D0
000010B0  4E4F                     186          TRAP #15
000010B2  2401                     187          MOVE.L D1,D2    *START ADDRESS OF ARRAY IN D2
000010B4                           188      
000010B4  303C 000E                189          MOVE #14,D0
000010B8  43F9 00002CD1            190          LEA PROMPT2, A1
000010BE  4E4F                     191          TRAP #15
000010C0                           192      
000010C0  303C 0004                193          MOVE #4,D0
000010C4  4E4F                     194          TRAP #15
000010C6  2601                     195          MOVE.L D1,D3    *END ADDRESS OF ARRAY IN D3
000010C8                           196          *LEA TEST,A6
000010C8  2C42                     197          MOVEA.L D2,A6
000010CA  4E75                     198          RTS
000010CC                           199  
000010CC                           200  PRINT_DISSASSEMBLY    
000010CC  4EB9 000010D8            201          JSR DISASSEMBLE_MAIN
000010D2  4E75                     202          RTS 
000010D4                           203  
000010D4                           204    
000010D4                           205  EXIT_LOOP
000010D4  4E72 2700                206          STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
000010D8                           207  
000010D8                           208  
000010D8                           209                      *GET FIRST WORD OF OPCODE IN MEMORY
000010D8  45F9 00002AFA            210  DISASSEMBLE_MAIN    LEA CURRENT_WORD_ARRAY,A2 *GET A POINTER TO THE BIT ARRAY
000010DE  D5FC 00000010            211                      ADDA.L #WORD_SIZE_CONST,A2 *MOVE POINTER TO END OF ARRAY
000010E4                           212                      *LEA TEST_SUBQ,A6 *GET A POINTER TO THE CODE WE'RE DISASSEMBLING
000010E4  361E                     213                      MOVE.W  (A6)+,D3      *D3 STORES THE WORD WE ARE WORKING ON
000010E6                           214                  
000010E6                           215                      *16 BITS
000010E6  B67C 4E71                216                      CMP.W #NOP_CONST,D3
000010EA  6700 021E                217                      BEQ PROC_NOP
000010EE  B67C 4E75                218                      CMP.W #RTS_CONST,D3
000010F2  6700 0216                219                      BEQ PROC_RTS
000010F6  7400                     220                      MOVE.L #0,D2
000010F8  E24B                     221                      LSR.W #1,D3 *SHIFT OUT A BIT
000010FA  55C2                     222                      SCS D2           *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000010FC  84FC 00FF                223                      DIVU.W #$FF,D2      *MAKE IT A 1 IF IT WAS $FF
00001100  1502                     224                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
00001102                           225  
00001102                           226                      *15 BITS
00001102  7400                     227                      MOVE.L #0,D2
00001104  E24B                     228                      LSR.W #1,D3 *SHIFT OUT A BIT
00001106  55C2                     229                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001108  84FC 00FF                230                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
0000110C  1502                     231                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
0000110E                           232  
0000110E                           233                      *14 BITS
0000110E  7400                     234                      MOVE.L #0,D2
00001110  E24B                     235                      LSR.W #1,D3 *SHIFT OUT A BIT
00001112  55C2                     236                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001114  84FC 00FF                237                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001118  1502                     238                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
0000111A                           239  
0000111A                           240                      *13 BITS
0000111A  7400                     241                      MOVE.L #0,D2
0000111C  E24B                     242                      LSR.W #1,D3 *SHIFT OUT A BIT
0000111E  55C2                     243                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001120  84FC 00FF                244                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001124  1502                     245                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
00001126                           246  
00001126                           247                      *12 BITS
00001126  7400                     248                      MOVE.L #0,D2
00001128  E24B                     249                      LSR.W #1,D3 *SHIFT OUT A BIT
0000112A  55C2                     250                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
0000112C  84FC 00FF                251                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001130  1502                     252                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
00001132                           253  
00001132                           254                      *11 BITS
00001132  7400                     255                      MOVE.L #0,D2
00001134  E24B                     256                      LSR.W #1,D3 *SHIFT OUT A BIT
00001136  55C2                     257                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001138  84FC 00FF                258                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
0000113C  1502                     259                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
0000113E                           260  
0000113E                           261                      *10 BITS
0000113E  B67C 0387                262                      CMP.W #ASL_MEM_CONST,D3
00001142  6700 01C6                263                      BEQ CHECK_ASL_MEM            *COMPLETE
00001146  B67C 0383                264                      CMP.W #ASR_MEM_CONST,D3
0000114A  6700 0208                265                      BEQ CHECK_ASR_MEM            *COMPLETE
0000114E  B67C 0022                266  CHECK_ASX_MEM_RET   CMP.W #BCLR_STATIC_CONST,D3
00001152  6700 029E                267                      BEQ CHECK_BCLR_STATIC        *COMPLETE
00001156  B67C 013A                268  CHECK_BCLRS_RET     CMP.W #JSR_CONST,D3         
0000115A  6700 032C                269                      BEQ CHECK_JSR               *COMPLETE
0000115E  B67C 038F                270  CHECK_JSR_RET       CMP.W #LSL_MEM_CONST,D3
00001162  6700 03BA                271                      BEQ CHECK_LSL_MEM            *COMPLETE
00001166  B67C 038B                272  CHECK_LSL_MEM_RET   CMP.W #LSR_MEM_CONST,D3
0000116A  6700 03F6                273                      BEQ CHECK_LSR_MEM            *COMPLETE
0000116E  B67C 039F                274  CHECK_LSR_MEM_RET   CMP.W #ROL_MEM_CONST,D3
00001172  6700 0436                275                      BEQ CHECK_ROL_MEM           *COMPLETE
00001176  B67C 039B                276  CHECK_ROL_MEM_RET   CMP.W #ROR_MEM_CONST,D3
0000117A  6700 0476                277                      BEQ CHECK_ROR_MEM           *COMPLETE
0000117E                           278                      
0000117E                           279                      *SHIFT BITS
0000117E  7400                     280  CHECK_ROR_MEM_RET   MOVE.L #0,D2
00001180  E24B                     281                      LSR.W #1,D3 *SHIFT OUT A BIT
00001182  55C2                     282                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001184  84FC 00FF                283                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001188  1502                     284                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY       
0000118A                           285                      
0000118A                           286                      
0000118A                           287                      *9 BIT CHECKS
0000118A                           288                      *COMPARISON PART FOR 9-BIT CHECKS
0000118A  B67C 0091                289                      CMP.W #MOVEM_REG_TO_MEM_CONST,D3 *COMPLETE
0000118E  6700 04AA                290                      BEQ CHECK_MOVEM_REG_TO_MEM
00001192  B67C 0099                291  CHECK_MOVEM_RTM_RET CMP.W #MOVEM_MEM_TO_REG_CONST,D3 *COMPLETE
00001196  6700 0522                292                      BEQ CHECK_MOVEM_MEM_TO_REG
0000119A                           293                      
0000119A                           294                      *SHIFT BITS
0000119A  7400                     295  CHECK_MOVEM_MTR_RET MOVE.L #0,D2
0000119C  E24B                     296                      LSR.W #1,D3 *SHIFT OUT A BIT
0000119E  55C2                     297                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000011A0  84FC 00FF                298                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
000011A4  1502                     299                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
000011A6                           300  
000011A6                           301                      *8 BIT checks
000011A6  B67C 0065                302                      CMP.W #BCS_CONST,D3
000011AA  6700 06C4                303                      BEQ CHECK_BCS_CONST
000011AE  B67C 006C                304                      CMP.W #BGE_CONST,D3
000011B2  6700 0670                305                      BEQ CHECK_BGE_CONST
000011B6  B67C 006D                306                      CMP.W #BLT_CONST,D3
000011BA  6700 0726                307                      BEQ CHECK_BLT_CONST
000011BE  B67C 0060                308                      CMP.W #BRA_CONST,D3
000011C2  6700 05C8                309                      BEQ CHECK_BRA_CONST
000011C6  B67C 0068                310                      CMP.W #BVC_CONST,D3
000011CA  6700 07AE                311                      BEQ CHECK_BVC_CONST
000011CE  B67C 0062                312                      CMP.W #BHI_CONST,D3
000011D2  6700 05DE                313                      BEQ CHECK_BHI_CONST
000011D6  B67C 0067                314                      CMP.W #BEQ_CONST,D3
000011DA  6700 0622                315                      BEQ CHECK_BEQ_CONST
000011DE  B67C 006E                316                      CMP.W #BGT_CONST,D3
000011E2  6700 0666                317                      BEQ CHECK_BGT_CONST
000011E6  B67C 006F                318                      CMP.W #BLE_CONST,D3
000011EA  6700 06AA                319                      BEQ CHECK_BLE_CONST
000011EE  B67C 0063                320                      CMP.W #BLS_CONST,D3
000011F2  6700 06C8                321                      BEQ CHECK_BLS_CONST
000011F6  B67C 006B                322                      CMP.W #BMI_CONST,D3
000011FA  6700 070C                323                      BEQ CHECK_BMI_CONST
000011FE  B67C 0066                324                      CMP.W #BNE_CONST,D3
00001202  6700 072A                325                      BEQ CHECK_BNE_CONST
00001206  B67C 006A                326                      CMP.W #BPL_CONST,D3
0000120A  6700 0748                327                      BEQ CHECK_BPL_CONST
0000120E  B67C 0069                328                      CMP.W #BVS_CONST,D3
00001212  6700 078C                329                      BEQ CHECK_BVS_CONST
00001216  B67C 000C                330                      CMP.W #CMPI_CONST,D3
0000121A  6700 08A0                331                      BEQ CHECK_CMPI_CONST
0000121E  B67C 0044                332                      CMP.W #NEG_CONST,D3
00001222  6700 0816                333                      BEQ CHECK_NEG_CONST
00001226  B67C 0000                334                      CMP.W #ORI_CONST,D3
0000122A  6700 0936                335                      BEQ CHECK_ORI_CONST
0000122E                           336  
0000122E                           337                      *SHIFT BITS
0000122E  7400                     338                      MOVE.L #0,D2
00001230  E24B                     339                      LSR.W #1,D3 *SHIFT OUT A BIT
00001232  55C2                     340                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001234  84FC 00FF                341                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001238  1502                     342                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
0000123A                           343                                                            
0000123A                           344                      *7 BITS
0000123A  7400                     345                      MOVE.L #0,D2
0000123C  E24B                     346                      LSR.W #1,D3 *SHIFT OUT A BIT
0000123E  55C2                     347                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001240  84FC 00FF                348                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001244  1502                     349                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
00001246                           350  
00001246                           351                      *6 BITS
00001246  7400                     352                      MOVE.L #0,D2
00001248  E24B                     353                      LSR.W #1,D3 *SHIFT OUT A BIT
0000124A  55C2                     354                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
0000124C  84FC 00FF                355                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
00001250  1502                     356                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
00001252                           357  
00001252                           358                      *5 BITS
00001252  7400                     359                      MOVE.L #0,D2
00001254  E24B                     360                      LSR.W #1,D3 *SHIFT OUT A BIT
00001256  55C2                     361                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
00001258  84FC 00FF                362                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
0000125C  1502                     363                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
0000125E                           364  
0000125E                           365                      *INCOMPLETE
0000125E                           366                      *4 BITS
0000125E  B67C 000D                367                      CMP.W #ADD_CONST,D3
00001262  6700 098C                368                      BEQ CHECK_ADD
00001266  B67C 0009                369  CHECK_ADD_RET       CMP.W #SUB_CONST,D3
0000126A  6700 0B90                370                      BEQ CHECK_SUB
0000126E  B67C 000E                371  CHECK_SUB_RET       CMP.W #ASL_ASR_REG_CONST,D3
00001272  6700 0F8E                372                      BEQ CHECK_ASL_ASR_REG
00001276  B67C 000B                373  CHECK_ASL_ASR_RET   CMP.W #CMP_EOR_CONST,D3
0000127A  6700 0DBE                374                      BEQ CHECK_CMP_EOR
0000127E  B67C 000C                375  CHECK_CMP_EOR_RET   CMP.W #MULS_WORD_CONST,D3
00001282  6700 120C                376                      BEQ CHECK_MULS_WORD_CONST
00001286  B67C 0008                377                      CMP.W #DIVS_WORD_CONST,D3           *CHECK IF DIVS/OR
0000128A  6700 12E8                378                      BEQ CHECK_DIVS_OR_CONST
0000128E  B67C 0004                379                      CMP.W #LEA_CONST,D3
00001292  6700 1496                380                      BEQ CHECK_LEA_CONST
00001296  B67C 0005                381                      CMP.W #SUBQ_CONST, D3
0000129A  6700 1500                382                      BEQ CHECK_SUBQ_CONST
0000129E  B67C 0000                383                      CMP.W #BCLR_DYNAMIC_CONST, D3
000012A2  6700 125E                384                      BEQ CHECK_BCLR_DYNAMIC
000012A6                           385                      
000012A6                           386                      *SHIFT BITS
000012A6  7400                     387                      MOVE.L #0,D2
000012A8  E24B                     388                      LSR.W #1,D3 *SHIFT OUT A BIT
000012AA  55C2                     389                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000012AC  84FC 00FF                390                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
000012B0  1502                     391                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
000012B2                           392  
000012B2                           393                      *3 BITS
000012B2  7400                     394                      MOVE.L #0,D2
000012B4  E24B                     395                      LSR.W #1,D3 *SHIFT OUT A BIT
000012B6  55C2                     396                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000012B8  84FC 00FF                397                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
000012BC  1502                     398                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
000012BE                           399  
000012BE                           400                      *INCOMPLETE
000012BE                           401                      *2 BITS
000012BE  B67C 0000                402                      CMP.W #MOVE_CONST,D3
000012C2  6700 10B0                403                      BEQ CHECK_MOVE
000012C6  7400                     404  CHECK_MOVE_RET      MOVE.L #0,D2
000012C8  E24B                     405                      LSR.W #1,D3 *SHIFT OUT A BIT
000012CA  55C2                     406                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000012CC  84FC 00FF                407                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
000012D0  1502                     408                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
000012D2                           409  
000012D2                           410                      *1 BIT
000012D2  7400                     411                      MOVE.L #0,D2
000012D4  E24B                     412                      LSR.W #1,D3 *SHIFT OUT A BIT
000012D6  55C2                     413                      SCS D2 *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000012D8  84FC 00FF                414                      DIVU.W #$FF,D2 *MAKE IT A 1 IF IT WAS $FF
000012DC  1502                     415                      MOVE.B D2,-(A2) *MOVE THE BIT WE SHIFTED OUT INTO THE BIT ARRAY
000012DE                           416  
000012DE                           417  UNSUPPORTED_OP      *PRINT "DATA "
000012DE  43F9 00002C2A            418                      LEA DATA_TEXT,A1
000012E4  103C 000E                419                      MOVE.B #14,D0
000012E8  4E4F                     420                      TRAP #15
000012EA                           421                      *GET TO THE START OF THE BIT ARRAY FOR THE FIRST WORD, AND PUT IT BACK INTO A SINGLE WORD IN D1.
000012EA  45F9 00002AFA            422                      LEA CURRENT_WORD_ARRAY,A2
000012F0  1C3C 0010                423                      MOVE.B #WORD_SIZE_CONST,D6
000012F4  4EB9 000028F2            424                      JSR BITARR_TO_INT
000012FA  3207                     425                      MOVE.W D7,D1
000012FC                           426                      *^
000012FC                           427                      *IT WAS A B
000012FC                           428                      *A B WHERE IT SHOULD HAVE BEEN A W
000012FC                           429                      *I'M DONE
000012FC                           430                      *I'M QUITTING PROGRAMMING FOREVER
000012FC                           431                      *BYE
000012FC  4EB9 00002920            432                      JSR PRINT_HEX *PRINT THE WORD IN HEX
00001302  4EB9 00002A72            433                      JSR PRINT_NEXT_LINE *PRINT CARRIAGE RETURN AND LINE FEED
00001308  4E75                     434                      RTS      
0000130A                           435                      
0000130A                           436  ******************************16 BITS******************************
0000130A                           437  
0000130A                           438  *TODO
0000130A                           439  PROC_NOP
0000130A                           440                                 
0000130A                           441  
0000130A                           442  *TODO
0000130A                           443  PROC_RTS            
0000130A                           444  
0000130A                           445  ******************************10 BITS******************************
0000130A                           446  
0000130A                           447  *NEEDS TESTING
0000130A                           448  CHECK_ASL_MEM       *READ MODE (3 BITS) INTO D2
0000130A  1C3C 0003                449                      MOVE.B #3,D6
0000130E  4EB9 000028F2            450                      JSR BITARR_TO_INT
00001314  1407                     451                      MOVE.B D7,D2
00001316                           452                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
00001316  7200                     453                      MOVE.L #0,D1 *CLEAR D1
00001318  1C3C 0003                454                      MOVE.B #3,D6
0000131C  4EB9 000028F2            455                      JSR BITARR_TO_INT
00001322  1207                     456                      MOVE.B D7,D1
00001324  4EB9 0000139E            457                      JSR ASX_MEM_CVALID *CHECK EA MODE VALIDITY
0000132A                           458                      *PRINT "ASL"
0000132A  43F9 00002BD7            459                      LEA ASL_TEXT,A1
00001330  103C 000E                460                      MOVE.B #14,D0
00001334  4E4F                     461                      TRAP #15
00001336                           462                      *PRINT ".W "
00001336  43F9 00002BB8            463                      LEA WORD_TEXT,A1
0000133C  4E4F                     464                      TRAP #15
0000133E                           465                      *PRINT EA
0000133E  163C 0001                466                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
00001342  4EB9 00002A80            467                      JSR PRINT_TOKEN
00001348  4EB9 00002A72            468                      JSR PRINT_NEXT_LINE
0000134E  4E75                     469                      RTS
00001350  4E72 2700                470                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00001354                           471                      
00001354                           472  *NEEDS TESTING
00001354                           473  CHECK_ASR_MEM       *READ MODE (3 BITS) INTO D2
00001354  1C3C 0003                474                      MOVE.B #3,D6
00001358  4EB9 000028F2            475                      JSR BITARR_TO_INT
0000135E  1407                     476                      MOVE.B D7,D2
00001360                           477                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
00001360  7200                     478                      MOVE.L #0,D1 *CLEAR D1
00001362  1C3C 0003                479                      MOVE.B #3,D6
00001366  4EB9 000028F2            480                      JSR BITARR_TO_INT
0000136C  1207                     481                      MOVE.B D7,D1
0000136E  4EB9 0000139E            482                      JSR ASX_MEM_CVALID *CHECK EA MODE VALIDITY
00001374                           483                      *PRINT "ASR"
00001374  43F9 00002BD3            484                      LEA ASR_TEXT,A1
0000137A  103C 000E                485                      MOVE.B #14,D0
0000137E  4E4F                     486                      TRAP #15
00001380                           487                      *PRINT ".W "
00001380  43F9 00002BB8            488                      LEA WORD_TEXT,A1
00001386  4E4F                     489                      TRAP #15
00001388                           490                      *PRINT EA
00001388  163C 0001                491                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
0000138C  4EB9 00002A80            492                      JSR PRINT_TOKEN
00001392  4EB9 00002A72            493                      JSR PRINT_NEXT_LINE
00001398  4E75                     494                      RTS
0000139A  4E72 2700                495                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
0000139E                           496                      
0000139E                           497                      *FOR USE BY CHECK_ASL_MEM AND CHECK_ASR_MEM
0000139E                           498                      *CHECKS IF THE EA MODE IN D2 IS VALID (MAY HAVE TO CHECK REG AS WELL; THIS SHOULD BE IN D1), AND BRANCHES APPROPRIATELY IF NOT
0000139E                           499                      *NOTE THAT THIS NEVER RETURNS TO THE CALLER IF THE MODE IS INVALID/UNSUPPORTED; INSTEAD IT RETURNS TO CHECK_ASX_MEM_RET OR TO PROC_INVALID
0000139E                           500  ASX_MEM_CVALID      *CHECK REG IF LITERAL
0000139E  B43C 0007                501                      CMP.B #LITERAL_CONST,D2
000013A2  6700 003A                502                      BEQ ASX_MEM_LITERAL
000013A6                           503                      *VALID IF MEMORY ACCESS
000013A6  B43C 0002                504                      CMP.B #NO_INC_DEC_CONST,D2
000013AA  6700 0030                505                      BEQ ASX_MEM_VALID
000013AE  B43C 0003                506                      CMP.B #POST_INC_CONST,D2
000013B2  6700 0028                507                      BEQ ASX_MEM_VALID
000013B6  B43C 0004                508                      CMP.B #PRE_DEC_CONST,D2
000013BA  6700 0020                509                      BEQ ASX_MEM_VALID
000013BE                           510                      *INVALID IF DN OR AN
000013BE  B43C 0000                511                      CMP.B #DATA_REGISTER_CONST,D2
000013C2  6700 0010                512                      BEQ ASX_MEM_INVALID
000013C6  B43C 0001                513                      CMP.B #ADDRESS_REGISTER_CONST,D2
000013CA  6700 0008                514                      BEQ ASX_MEM_INVALID
000013CE                           515                      *ELSE UNSUPPORTED
000013CE                           516  ASX_MEM_UNSUPPORTED *"RETURN" TO HANDLING FOR UNSUPPORTED OPERATIONS, RATHER THAN TO CALLER
000013CE  528F                     517                      ADDA.L #1,SP
000013D0  6000 FD7C                518                      BRA CHECK_ASX_MEM_RET
000013D4                           519  ASX_MEM_INVALID     *MOVE BACK BITARR POINTER (A2) BY THE NUMBER OF TIMES WE INCREMENTED IT (3+3==6), AND "RETURN" TO CHECKING NEXT OPERATION, RATHER THAN TO CALLER
000013D4  5D8A                     520                      SUBA.L #6,A2
000013D6  528F                     521                      ADDA.L #1,SP
000013D8  6000 FD74                522                      BRA CHECK_ASX_MEM_RET
000013DC  4E75                     523  ASX_MEM_VALID       RTS
000013DE                           524  ASX_MEM_LITERAL     *VALID IF MEMORY ADDRESS
000013DE  B23C 0000                525                      CMP.B #WORD_ADDRESS_CONST,D1
000013E2  67F8                     526                      BEQ ASX_MEM_VALID
000013E4  B23C 0001                527                      CMP.B #LONG_ADDRESS_CONST,D1
000013E8  67F2                     528                      BEQ ASX_MEM_VALID
000013EA                           529                      *INVALID IF IMMEDIATE
000013EA  B23C 0004                530                      CMP.B #IMMEDIATE_CONST,D1
000013EE  67E4                     531                      BEQ ASX_MEM_INVALID
000013F0                           532                      *ELSE UNSUPPORTED
000013F0  60DC                     533                      BRA ASX_MEM_UNSUPPORTED
000013F2                           534  
000013F2                           535  *NEEDS TESTING
000013F2  7200                     536  CHECK_BCLR_STATIC   MOVE.L #0,D1 *CLEAR D1
000013F4                           537                      *READ MODE (3 BITS) INTO D2
000013F4  1C3C 0003                538                      MOVE.B #3,D6
000013F8  4EB9 000028F2            539                      JSR BITARR_TO_INT
000013FE  1407                     540                      MOVE.B D7,D2
00001400                           541                      *READ REGISTER NUMBER (3 BITS) INTO D5
00001400  1C3C 0003                542                      MOVE.B #3,D6
00001404  4EB9 000028F2            543                      JSR BITARR_TO_INT
0000140A  1A07                     544                      MOVE.B D7,D5
0000140C                           545                      
0000140C                           546                      *CHECK MODE VALIDITY
0000140C                           547                      *INVALID IF AN
0000140C  B43C 0001                548                      CMP.B #ADDRESS_REGISTER_CONST,D2
00001410  6700 0070                549                      BEQ BCLRS_BAD_MODE
00001414                           550                      *IF LITERAL, CHECK REGISTER BITS
00001414  B43C 0007                551                      CMP.B #LITERAL_CONST,D2
00001418  6700 0050                552                      BEQ BCLRS_LITERAL
0000141C                           553                      *UNSUPPORTED IF DISPLACEMENT
0000141C  B43C 0005                554                      CMP.B #D16_AN_CONST,D2
00001420  6700 FEBC                555                      BEQ UNSUPPORTED_OP
00001424  B43C 0006                556                      CMP.B #D8_AN_XN_CONST,D2
00001428  6700 FEB4                557                      BEQ UNSUPPORTED_OP
0000142C                           558                      
0000142C                           559                      *PRINT "BCLR"
0000142C  43F9 00002C17            560  PRINT_BCLR_STATIC   LEA BCLR_TEXT,A1
00001432  103C 000E                561                      MOVE.B #14,D0
00001436  4E4F                     562                      TRAP #15
00001438  43F9 00002BB2            563                      LEA SPACE_TEXT,A1
0000143E  4E4F                     564                      TRAP #15
00001440                           565                      *PRINT BIT NUMBER
00001440  4EB9 000029C6            566                      JSR PRINT_WORD_IMM
00001446                           567                      *PRINT COMMA
00001446  103C 000E                568                      MOVE.B  #14,D0
0000144A  43F9 00002B9E            569                      LEA COMMA_TEXT, A1
00001450  4E4F                     570                      TRAP   #15
00001452                           571                      *PRINT EA
00001452  1205                     572                      MOVE.B D5,D1
00001454  163C 0002                573                      MOVE.B #LONG_CODE,D3 *TELL SUBROUTINE THAT SIZE IS LONG
00001458  4EB9 00002A80            574                      JSR PRINT_TOKEN
0000145E  4EB9 00002A72            575                      JSR PRINT_NEXT_LINE
00001464  4E75                     576                      RTS
00001466  4E72 2700                577                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
0000146A                           578                      
0000146A                           579                                          
0000146A                           580  BCLRS_LITERAL       *VALID IF MEMORY; CONTINUE
0000146A  BA3C 0000                581                      CMP.B #WORD_ADDRESS_CONST,D5
0000146E  67BC                     582                      BEQ PRINT_BCLR_STATIC *VALID, SO BRANCH BACK
00001470  BA3C 0001                583                      CMP.B #LONG_ADDRESS_CONST,D5
00001474  67B6                     584                      BEQ PRINT_BCLR_STATIC *VALID, SO BRANCH BACK
00001476                           585                      *INVALID IF IMMEDIATE; GO BACK TO CHECK MORE OPS
00001476  BA3C 0004                586                      CMP.B #IMMEDIATE_CONST,D5
0000147A  6700 0006                587                      BEQ BCLRS_BAD_MODE
0000147E                           588                      *ELSE UNSUPPORTED
0000147E  6000 FE5E                589                      BRA UNSUPPORTED_OP
00001482                           590  BCLRS_BAD_MODE      *ROLL BACK THE BIT ARRAY POINTER (3+3==6) AND RETURN TO CHECK OTHER OPERATIONS
00001482  5D8A                     591                      SUBA.L #6,A2
00001484  6000 FCD0                592                      BRA CHECK_BCLRS_RET
00001488                           593  
00001488                           594  
00001488                           595  *NEEDS TESTING
00001488                           596  CHECK_JSR           *READ MODE (3 BITS) INTO D2
00001488  1C3C 0003                597                      MOVE.B #3,D6
0000148C  4EB9 000028F2            598                      JSR BITARR_TO_INT
00001492  1407                     599                      MOVE.B D7,D2
00001494                           600                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
00001494  7200                     601                      MOVE.L #0,D1 *CLEAR D1
00001496  1C3C 0003                602                      MOVE.B #3,D6
0000149A  4EB9 000028F2            603                      JSR BITARR_TO_INT
000014A0  1207                     604                      MOVE.B D7,D1
000014A2                           605                      
000014A2                           606                      *CHECK WHETHER ADDRESSING MODE IS VALID, INVALID, OR UNRECOGNIZED
000014A2                           607                      *VALID IF (AN), WORD ADDRESS, OR LONG ADDRESS
000014A2  B43C 0002                608                      CMP.B #NO_INC_DEC_CONST,D2
000014A6  6700 002E                609                      BEQ PRINT_JSR
000014AA  B43C 0000                610                      CMP.B #WORD_ADDRESS_CONST,D2
000014AE  6700 0026                611                      BEQ PRINT_JSR
000014B2  B43C 0001                612                      CMP.B #LONG_ADDRESS_CONST,D2
000014B6  6700 001E                613                      BEQ PRINT_JSR
000014BA                           614                      *IF LITERAL, NEED TO CHECK REGISTER BITS
000014BA  B43C 0007                615                      CMP.B #LITERAL_CONST,D2
000014BE  6700 0040                616                      BEQ JSR_LITERAL
000014C2                           617                      *IF DISPLACEMENT, UNRECOGNIZED
000014C2  B43C 0005                618                      CMP.B #D16_AN_CONST,D2
000014C6  6700 004C                619                      BEQ JSR_UNRECOGNIZED
000014CA  B43C 0006                620                      CMP.B #D8_AN_XN_CONST,D2
000014CE  6700 0044                621                      BEQ JSR_UNRECOGNIZED
000014D2                           622                      *ELSE INVALID
000014D2  6000 0044                623                      BRA JSR_INVALID
000014D6                           624                      
000014D6                           625                      *PRINT "JSR"
000014D6  43F9 00002C39            626  PRINT_JSR           LEA JSR_TEXT,A1
000014DC  103C 000E                627                      MOVE.B #14,D0
000014E0  4E4F                     628                      TRAP #15
000014E2  43F9 00002BB2            629                      LEA SPACE_TEXT,A1
000014E8  4E4F                     630                      TRAP #15
000014EA                           631                      *PRINT EA
000014EA  163C 0001                632                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
000014EE  4EB9 00002A80            633                      JSR PRINT_TOKEN
000014F4  4EB9 00002A72            634                      JSR PRINT_NEXT_LINE
000014FA  4E75                     635                      RTS
000014FC  4E72 2700                636                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00001500                           637  
00001500                           638                    
00001500                           639  JSR_LITERAL         *VALID IF MEMORY ADDRESS, SO GO BACK AND CONTINUE DECODING
00001500  B23C 0000                640                      CMP.B #WORD_ADDRESS_CONST,D1
00001504  67D0                     641                      BEQ PRINT_JSR
00001506  B23C 0001                642                      CMP.B #LONG_ADDRESS_CONST,D1
0000150A  67CA                     643                      BEQ PRINT_JSR
0000150C                           644                      *INVALID IF IMMEDIATE
0000150C  B23C 0004                645                      CMP.B #IMMEDIATE_CONST,D1
00001510  6700 0006                646                      BEQ JSR_INVALID
00001514                           647                      *ELSE UNRECOGNIZED
00001514  6000 FDC8                648  JSR_UNRECOGNIZED    BRA UNSUPPORTED_OP
00001518                           649  JSR_INVALID         *MOVE BACK THE BITARR POINTER (A2) THE NUMBER OF SPACES WE MOVED IT (3+3==6)
00001518  5D8A                     650                      SUBA.L #6,A2
0000151A  6000 FC42                651                      BRA CHECK_JSR_RET
0000151E                           652   
0000151E                           653  
0000151E                           654  *NEEDS TESTING
0000151E                           655  CHECK_LSL_MEM        *READ MODE (3 BITS) INTO D2
0000151E  1C3C 0003                656                      MOVE.B #3,D6
00001522  4EB9 000028F2            657                      JSR BITARR_TO_INT
00001528  1407                     658                      MOVE.B D7,D2
0000152A                           659                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
0000152A  7200                     660                      MOVE.L #0,D1 *CLEAR D1
0000152C  1C3C 0003                661                      MOVE.B #3,D6
00001530  4EB9 000028F2            662                      JSR BITARR_TO_INT
00001536  1207                     663                      MOVE.B D7,D1
00001538                           664                      *PRINT "ASL"
00001538  43F9 00002C41            665                      LEA LSL_TEXT,A1
0000153E  103C 000E                666                      MOVE.B #14,D0
00001542  4E4F                     667                      TRAP #15
00001544                           668                      *PRINT ".W "
00001544  43F9 00002BB8            669                      LEA WORD_TEXT,A1
0000154A  4E4F                     670                      TRAP #15
0000154C                           671                      *PRINT EA
0000154C  163C 0001                672                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
00001550  4EB9 00002A80            673                      JSR PRINT_TOKEN
00001556  4EB9 00002A72            674                      JSR PRINT_NEXT_LINE
0000155C  4E75                     675                      RTS
0000155E  4E72 2700                676                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!      
00001562                           677  
00001562                           678  *NEEDS TESTING
00001562                           679  CHECK_LSR_MEM       *READ MODE (3 BITS) INTO D2
00001562  1C3C 0003                680                      MOVE.B #3,D6
00001566  4EB9 000028F2            681                      JSR BITARR_TO_INT
0000156C  1407                     682                      MOVE.B D7,D2
0000156E                           683                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
0000156E  7200                     684                      MOVE.L #0,D1 *CLEAR D1
00001570  1C3C 0003                685                      MOVE.B #3,D6
00001574  4EB9 000028F2            686                      JSR BITARR_TO_INT
0000157A  1207                     687                      MOVE.B D7,D1
0000157C  4EB8 139E                688                      JSR ASX_MEM_CVALID *CHECK EA MODE VALIDITY
00001580                           689                      *PRINT "ASR"
00001580  43F9 00002C45            690                      LEA LSR_TEXT,A1
00001586  103C 000E                691                      MOVE.B #14,D0
0000158A  4E4F                     692                      TRAP #15
0000158C                           693                      *PRINT ".W "
0000158C  43F9 00002BB8            694                      LEA WORD_TEXT,A1
00001592  4E4F                     695                      TRAP #15
00001594                           696                      *PRINT EA
00001594  163C 0001                697                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
00001598  4EB9 00002A80            698                      JSR PRINT_TOKEN
0000159E  4EB9 00002A72            699                      JSR PRINT_NEXT_LINE
000015A4  4E75                     700                      RTS
000015A6  4E72 2700                701                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!! 
000015AA                           702  
000015AA                           703  *NEEDS TESTING
000015AA                           704  CHECK_ROL_MEM       *READ MODE (3 BITS) INTO D2
000015AA  1C3C 0003                705                      MOVE.B #3,D6
000015AE  4EB9 000028F2            706                      JSR BITARR_TO_INT
000015B4  1407                     707                      MOVE.B D7,D2
000015B6                           708                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
000015B6  7200                     709                      MOVE.L #0,D1 *CLEAR D1
000015B8  1C3C 0003                710                      MOVE.B #3,D6
000015BC  4EB9 000028F2            711                      JSR BITARR_TO_INT
000015C2  1207                     712                      MOVE.B D7,D1
000015C4  4EB8 139E                713                      JSR ASX_MEM_CVALID *CHECK EA MODE VALIDITY
000015C8                           714                      *PRINT "ROL"
000015C8  43F9 00002C6E            715                      LEA ROL_TEXT,A1
000015CE  103C 000E                716                      MOVE.B #14,D0
000015D2  4E4F                     717                      TRAP #15
000015D4                           718                      *PRINT ".W "
000015D4  43F9 00002BB8            719                      LEA WORD_TEXT,A1
000015DA  4E4F                     720                      TRAP #15
000015DC                           721                      *PRINT EA
000015DC  163C 0001                722                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
000015E0  4EB9 00002A80            723                      JSR PRINT_TOKEN
000015E6  4EB9 00002A72            724                      JSR PRINT_NEXT_LINE
000015EC  4E75                     725                      RTS
000015EE  4E72 2700                726                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
000015F2                           727  
000015F2                           728  *NEEDS TESTING
000015F2                           729  CHECK_ROR_MEM       *READ MODE (3 BITS) INTO D2
000015F2  1C3C 0003                730                      MOVE.B #3,D6
000015F6  4EB9 000028F2            731                      JSR BITARR_TO_INT
000015FC  1407                     732                      MOVE.B D7,D2
000015FE                           733                      *READ REGISTER NUMBER (3 BITS) INTO D1.L
000015FE  7200                     734                      MOVE.L #0,D1 *CLEAR D1
00001600  1C3C 0003                735                      MOVE.B #3,D6
00001604  4EB9 000028F2            736                      JSR BITARR_TO_INT
0000160A  1207                     737                      MOVE.B D7,D1
0000160C  4EB8 139E                738                      JSR ASX_MEM_CVALID *CHECK EA MODE VALIDITY
00001610                           739                      *PRINT "ROR"
00001610  43F9 00002C6A            740                      LEA ROR_TEXT,A1
00001616  103C 000E                741                      MOVE.B #14,D0
0000161A  4E4F                     742                      TRAP #15
0000161C                           743                      *PRINT ".W "
0000161C  43F9 00002BB8            744                      LEA WORD_TEXT,A1
00001622  4E4F                     745                      TRAP #15
00001624                           746                      *PRINT EA
00001624  163C 0001                747                      MOVE.B #WORD_CODE,D3 *LET SUBROUTINE KNOW THAT SIZE IS WORD
00001628  4EB9 00002A80            748                      JSR PRINT_TOKEN
0000162E  4EB9 00002A72            749                      JSR PRINT_NEXT_LINE
00001634  4E75                     750                      RTS
00001636  4E72 2700                751                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
0000163A                           752    
0000163A                           753  
0000163A                           754  *******************************9 BITS******************************
0000163A                           755  *NEEDS TESTING
0000163A                           756  CHECK_MOVEM_REG_TO_MEM
0000163A                           757                      *READ SIZE BIT (1 BIT) INTO D3 
0000163A  1C3C 0001                758                      MOVE.B #1,D6
0000163E  4EB9 000028F2            759                      JSR BITARR_TO_INT
00001644  1607                     760                      MOVE.B D7,D3     
00001646                           761                      
00001646  1C3C 0003                762                      MOVE.B #3,D6                *GET THE <EA> MODE BITS AND STORE IN D2                    
0000164A  4EB9 000028F2            763                      JSR BITARR_TO_INT
00001650  1407                     764                      MOVE.B D7,D2              
00001652  1C3C 0003                765                      MOVE.B #3,D6                *GET THE <EA> REGISTER BITS AND STORE IN D1
00001656  4EB9 000028F2            766                      JSR BITARR_TO_INT
0000165C  4281                     767                      CLR.L D1
0000165E  1207                     768                      MOVE.B D7,D1
00001660                           769                      
00001660                           770                      *PRINT MOVEM
00001660  43F9 00002C54            771                      LEA MOVEM_TEXT, A1
00001666  103C 000E                772                      MOVE.B #14,D0
0000166A  4E4F                     773                      TRAP #15
0000166C                           774                      
0000166C                           775                      *PRINT SIZE EXTENSION
0000166C  B63C 0000                776                      CMP.B #0,D3             *OPCODE IS A WORD
00001670  6700 0006                777                      BEQ MOVEM_RTM_WORD
00001674  6000 0012                778                      BRA MOVEM_RTM_LONG
00001678  43F9 00002BB8            779  MOVEM_RTM_WORD      LEA WORD_TEXT, A1       *PRINT '.W'
0000167E  103C 000E                780                      MOVE.B #14,D0
00001682  4E4F                     781                      TRAP #15
00001684  6000 000E                782                      BRA MOVEM_RTM_PROC_CONT *PRINT LIST OF REGISTERS TO STORE
00001688  43F9 00002BBC            783  MOVEM_RTM_LONG      LEA LONG_TEXT, A1       *PRINT '.L'
0000168E  103C 000E                784                      MOVE.B #14,D0
00001692  4E4F                     785                      TRAP #15
00001694  1601                     786  MOVEM_RTM_PROC_CONT MOVE.B D1,D3            *TEMP STORE <EA> REGISTER BITS IN D3 WHILE PROCESSING LIST
00001696  4EB9 00002856            787                      JSR PRINT_MOVEM_DREGS
0000169C  1203                     788                      MOVE.B D3,D1            *MOVE REGISTERS BACK TO D1
0000169E  4EB9 00002912            789                      JSR PRINT_COMMA
000016A4  163C 0001                790                      MOVE.B #WORD_CODE,D3    *LET SUBROUTINE KNOW THAT SIZE IS WORD
000016A8  4EB9 00002A80            791                      JSR PRINT_TOKEN
000016AE  4EB9 00002A72            792                      JSR PRINT_NEXT_LINE
000016B4  4E75                     793                      RTS
000016B6  4E72 2700                794                      STOP #EXIT              *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
000016BA                           795                                       
000016BA                           796                      
000016BA                           797  *TODO
000016BA                           798  CHECK_MOVEM_MEM_TO_REG
000016BA                           799                      *READ SIZE BIT (1 BIT) INTO D3 
000016BA  1C3C 0001                800                      MOVE.B #1,D6
000016BE  4EB9 000028F2            801                      JSR BITARR_TO_INT
000016C4  1607                     802                      MOVE.B D7,D3     
000016C6                           803                      
000016C6  1C3C 0003                804                      MOVE.B #3,D6                *GET THE <EA> MODE BITS AND STORE IN D2                    
000016CA  4EB9 000028F2            805                      JSR BITARR_TO_INT
000016D0  1407                     806                      MOVE.B D7,D2              
000016D2  1C3C 0003                807                      MOVE.B #3,D6                *GET THE <EA> REGISTER BITS AND STORE IN D1
000016D6  4EB9 000028F2            808                      JSR BITARR_TO_INT
000016DC  4281                     809                      CLR.L D1
000016DE  1207                     810                      MOVE.B D7,D1
000016E0                           811                      
000016E0                           812                      *PRINT MOVEM
000016E0  43F9 00002C54            813                      LEA MOVEM_TEXT, A1
000016E6  103C 000E                814                      MOVE.B #14,D0
000016EA  4E4F                     815                      TRAP #15
000016EC                           816                      
000016EC                           817                      *PRINT SIZE EXTENSION
000016EC  B63C 0000                818                      CMP.B #0,D3             *OPCODE IS A WORD
000016F0  6700 0006                819                      BEQ MOVEM_MTR_WORD
000016F4  6000 0014                820                      BRA MOVEM_MTR_LONG
000016F8  43F9 00002BB8            821  MOVEM_MTR_WORD      LEA WORD_TEXT, A1       *PRINT '.W'
000016FE  103C 000E                822                      MOVE.B #14,D0
00001702  4E4F                     823                      TRAP #15
00001704  1A01                     824                      MOVE.B D1,D5
00001706  6000 000E                825                      BRA MOVEM_MTR_PROC_CONT *PRINT LIST OF REGISTERS TO STORE
0000170A  43F9 00002BBC            826  MOVEM_MTR_LONG      LEA LONG_TEXT, A1       *PRINT '.L'
00001710  103C 000E                827                      MOVE.B #14,D0
00001714  4E4F                     828                      TRAP #15
00001716  163C 0001                829  MOVEM_MTR_PROC_CONT MOVE.B #WORD_CODE,D3    *LET SUBROUTINE KNOW THAT SIZE IS WORD
0000171A  B43C 0007                830                      CMP.B #7, D2
0000171E  6700 0006                831                      BEQ HANDLE_ADDRESS
00001722  6000 0008                832                      BRA MTR_CONT                        *HANDLE ADDRESSES
00001726  548E                     833  HANDLE_ADDRESS      ADDA.L #2, A6
00001728  6000 0002                834                      BRA MTR_CONT                    
0000172C  4EB9 00002A80            835  MTR_CONT            JSR PRINT_TOKEN
00001732  4EB9 00002912            836                      JSR PRINT_COMMA
00001738  1205                     837                      MOVE.B D5,D1
0000173A  B43C 0007                838                      CMP.B #7, D2
0000173E  6700 0006                839                      BEQ FIX_ADDRESS_MTR
00001742  6000 0016                840                      BRA MTR_CONT2
00001746  B23C 0000                841  FIX_ADDRESS_MTR     CMP.B #0,D1
0000174A  6700 0006                842                      BEQ FIX_WORD
0000174E  6000 0008                843                      BRA FIX_LONG
00001752  598E                     844  FIX_WORD            SUBA.L #4,A6                    
00001754  6000 0004                845                      BRA MTR_CONT2
00001758  5D8E                     846  FIX_LONG            SUBA.L #6,A6                    
0000175A  4EB9 00002856            847  MTR_CONT2           JSR PRINT_MOVEM_DREGS
00001760  B43C 0007                848                      CMP.B #7,D2                 *FIX POINTER IF <EA> WAS ADDRESS
00001764  6700 0006                849                      BEQ FIX_ADDRESS2
00001768  6000 0016                850                      BRA MTR_CONT3
0000176C  B23C 0000                851  FIX_ADDRESS2        CMP.B #0,D1
00001770  6700 0006                852                      BEQ FIX_WORD_ADD
00001774  6000 0008                853                      BRA FIX_LONG_ADD
00001778  548E                     854  FIX_WORD_ADD        ADDA.L #2, A6
0000177A  6000 0004                855                      BRA MTR_CONT3
0000177E  588E                     856  FIX_LONG_ADD        ADDA.L #4,A6                    
00001780  4EB9 00002A72            857  MTR_CONT3           JSR PRINT_NEXT_LINE
00001786  4E75                     858                      RTS
00001788  4E72 2700                859                      STOP #EXIT              *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
0000178C                           860                      
0000178C                           861  *******************************8 BITS******************************
0000178C                           862  CHECK_BRA_CONST     
0000178C  43F9 00002C0B            863                      LEA BRA_TEXT,A1
00001792  103C 000E                864                      MOVE.B #14,D0
00001796  4E4F                     865                      TRAP #15
00001798  43F9 00002BB2            866                      LEA SPACE_TEXT,A1
0000179E  4E4F                     867                      TRAP #15
000017A0  4EB9 000019C6            868                      JSR PROC_BCC_OUT
000017A6  4EB9 00002A72            869                      JSR PRINT_NEXT_LINE
000017AC  4E75                     870                      RTS
000017AE  4E72 2700                871                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!                 
000017B2                           872  
000017B2                           873  CHECK_BHI_CONST     
000017B2  43F9 00002BDB            874                      LEA BHI_TEXT,A1
000017B8  103C 000E                875                      MOVE.B #14,D0
000017BC  4E4F                     876                      TRAP #15
000017BE  43F9 00002BB2            877                      LEA SPACE_TEXT,A1
000017C4  4E4F                     878                      TRAP #15
000017C6  4EB9 000019C6            879                      JSR PROC_BCC_OUT
000017CC  4EB9 00002A72            880                      JSR PRINT_NEXT_LINE
000017D2  4E75                     881                      RTS
000017D4  4E72 2700                882                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!                
000017D8                           883  
000017D8                           884  CHECK_BLO_CONST     
000017D8  43F9 00002BDF            885                      LEA BLO_TEXT,A1
000017DE  103C 000E                886                      MOVE.B #14,D0
000017E2  4E4F                     887                      TRAP #15
000017E4  43F9 00002BB2            888                      LEA SPACE_TEXT,A1
000017EA  4E4F                     889                      TRAP #15
000017EC  4EB9 000019C6            890                      JSR PROC_BCC_OUT
000017F2  4EB9 00002A72            891                      JSR PRINT_NEXT_LINE
000017F8  4E75                     892                      RTS
000017FA  4E72 2700                893                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
000017FE                           894  
000017FE                           895  CHECK_BEQ_CONST     
000017FE  43F9 00002BE3            896                      LEA BEQ_TEXT,A1
00001804  103C 000E                897                      MOVE.B #14,D0
00001808  4E4F                     898                      TRAP #15
0000180A  43F9 00002BB2            899                      LEA SPACE_TEXT,A1
00001810  4E4F                     900                      TRAP #15
00001812  4EB9 000019C6            901                      JSR PROC_BCC_OUT
00001818  4EB9 00002A72            902                      JSR PRINT_NEXT_LINE
0000181E  4E75                     903                      RTS
00001820  4E72 2700                904                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
00001824                           905  CHECK_BGE_CONST     
00001824  43F9 00002BE7            906                      LEA BGE_TEXT,A1
0000182A  103C 000E                907                      MOVE.B #14,D0
0000182E  4E4F                     908                      TRAP #15
00001830  43F9 00002BB2            909                      LEA SPACE_TEXT,A1
00001836  4E4F                     910                      TRAP #15
00001838  4EB9 000019C6            911                      JSR PROC_BCC_OUT
0000183E  4EB9 00002A72            912                      JSR PRINT_NEXT_LINE
00001844  4E75                     913                      RTS
00001846  4E72 2700                914                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
0000184A                           915  
0000184A                           916  CHECK_BGT_CONST     
0000184A  43F9 00002BEB            917                      LEA BGT_TEXT,A1
00001850  103C 000E                918                      MOVE.B #14,D0
00001854  4E4F                     919                      TRAP #15
00001856  43F9 00002BB2            920                      LEA SPACE_TEXT,A1
0000185C  4E4F                     921                      TRAP #15
0000185E  4EB9 000019C6            922                      JSR PROC_BCC_OUT
00001864  4EB9 00002A72            923                      JSR PRINT_NEXT_LINE
0000186A  4E75                     924                      RTS
0000186C  4E72 2700                925                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
00001870                           926  CHECK_BCS_CONST     
00001870  43F9 00002BEF            927                      LEA BCS_TEXT,A1
00001876  103C 000E                928                      MOVE.B #14,D0
0000187A  4E4F                     929                      TRAP #15
0000187C  43F9 00002BB2            930                      LEA SPACE_TEXT,A1
00001882  4E4F                     931                      TRAP #15
00001884  4EB9 000019C6            932                      JSR PROC_BCC_OUT
0000188A  4EB9 00002A72            933                      JSR PRINT_NEXT_LINE
00001890  4E75                     934                      RTS
00001892  4E72 2700                935                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
00001896                           936  CHECK_BLE_CONST     
00001896  43F9 00002BF3            937                      LEA BLE_TEXT,A1
0000189C  103C 000E                938                      MOVE.B #14,D0
000018A0  4E4F                     939                      TRAP #15
000018A2  43F9 00002BB2            940                      LEA SPACE_TEXT,A1
000018A8  4E4F                     941                      TRAP #15
000018AA  4EB9 000019C6            942                      JSR PROC_BCC_OUT
000018B0  4EB9 00002A72            943                      JSR PRINT_NEXT_LINE
000018B6  4E75                     944                      RTS
000018B8  4E72 2700                945                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
000018BC                           946  
000018BC                           947  CHECK_BLS_CONST     
000018BC  43F9 00002BF7            948                      LEA BLS_TEXT,A1
000018C2  103C 000E                949                      MOVE.B #14,D0
000018C6  4E4F                     950                      TRAP #15
000018C8  43F9 00002BB2            951                      LEA SPACE_TEXT,A1
000018CE  4E4F                     952                      TRAP #15
000018D0  4EB9 000019C6            953                      JSR PROC_BCC_OUT
000018D6  4EB9 00002A72            954                      JSR PRINT_NEXT_LINE
000018DC  4E75                     955                      RTS
000018DE  4E72 2700                956                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
000018E2                           957  
000018E2                           958  CHECK_BLT_CONST     
000018E2  43F9 00002BFB            959                      LEA BLT_TEXT,A1
000018E8  103C 000E                960                      MOVE.B #14,D0
000018EC  4E4F                     961                      TRAP #15
000018EE  43F9 00002BB2            962                      LEA SPACE_TEXT,A1
000018F4  4E4F                     963                      TRAP #15
000018F6  4EB9 000019C6            964                      JSR PROC_BCC_OUT
000018FC  4EB9 00002A72            965                      JSR PRINT_NEXT_LINE
00001902  4E75                     966                      RTS
00001904  4E72 2700                967                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
00001908                           968  
00001908                           969  CHECK_BMI_CONST     
00001908  43F9 00002BFF            970                      LEA BMI_TEXT,A1
0000190E  103C 000E                971                      MOVE.B #14,D0
00001912  4E4F                     972                      TRAP #15
00001914  43F9 00002BB2            973                      LEA SPACE_TEXT,A1
0000191A  4E4F                     974                      TRAP #15
0000191C  4EB9 000019C6            975                      JSR PROC_BCC_OUT
00001922  4EB9 00002A72            976                      JSR PRINT_NEXT_LINE
00001928  4E75                     977                      RTS
0000192A  4E72 2700                978                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
0000192E                           979  
0000192E                           980  CHECK_BNE_CONST     
0000192E  43F9 00002C03            981                      LEA BNE_TEXT,A1
00001934  103C 000E                982                      MOVE.B #14,D0
00001938  4E4F                     983                      TRAP #15
0000193A  43F9 00002BB2            984                      LEA SPACE_TEXT,A1
00001940  4E4F                     985                      TRAP #15
00001942  4EB9 000019C6            986                      JSR PROC_BCC_OUT
00001948  4EB9 00002A72            987                      JSR PRINT_NEXT_LINE
0000194E  4E75                     988                      RTS
00001950  4E72 2700                989                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
00001954                           990  
00001954                           991  CHECK_BPL_CONST     
00001954  43F9 00002C07            992                      LEA BPL_TEXT,A1
0000195A  103C 000E                993                      MOVE.B #14,D0
0000195E  4E4F                     994                      TRAP #15
00001960  43F9 00002BB2            995                      LEA SPACE_TEXT,A1
00001966  4E4F                     996                      TRAP #15
00001968  4EB9 000019C6            997                      JSR PROC_BCC_OUT
0000196E  4EB9 00002A72            998                      JSR PRINT_NEXT_LINE
00001974  4E75                     999                      RTS
00001976  4E72 2700               1000                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
0000197A                          1001  
0000197A                          1002  CHECK_BVC_CONST     
0000197A  43F9 00002C0F           1003                      LEA BVC_TEXT,A1
00001980  103C 000E               1004                      MOVE.B #14,D0
00001984  4E4F                    1005                      TRAP #15
00001986  43F9 00002BB2           1006                      LEA SPACE_TEXT,A1
0000198C  4E4F                    1007                      TRAP #15
0000198E  4EB9 000019C6           1008                      JSR PROC_BCC_OUT
00001994  4EB9 00002A72           1009                      JSR PRINT_NEXT_LINE
0000199A  4E75                    1010                      RTS
0000199C  4E72 2700               1011                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!! 
000019A0                          1012                      
000019A0                          1013  CHECK_BVS_CONST     
000019A0  43F9 00002C13           1014                      LEA BVS_TEXT,A1
000019A6  103C 000E               1015                      MOVE.B #14,D0
000019AA  4E4F                    1016                      TRAP #15
000019AC  43F9 00002BB2           1017                      LEA SPACE_TEXT,A1
000019B2  4E4F                    1018                      TRAP #15
000019B4  4EB9 000019C6           1019                      JSR PROC_BCC_OUT
000019BA  4EB9 00002A72           1020                      JSR PRINT_NEXT_LINE
000019C0  4E75                    1021                      RTS
000019C2  4E72 2700               1022                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!                     
000019C6                          1023  
000019C6                          1024  **************************************BRANCH DISPLACEMENT PROC CODE*********************************************
000019C6  7800                    1025  PROC_BCC_OUT        MOVE.L #0,D4 *CLEAR D4 FOR DISPLACEMENT
000019C8  7200                    1026                      MOVE.L #0,D1 *CLEAR D1 FOR OUTPUT
000019CA  1C3C 0008               1027                      MOVE.B #8,D6 *GRAB NEXT 8-BITS TO FIND DISPLACEMENT
000019CE  4EB9 000028F2           1028                      JSR BITARR_TO_INT
000019D4  1807                    1029                      MOVE.B D7,D4    *STORE DISPLACEMENT IN D4
000019D6  2A0E                    1030                      MOVE.L A6,D5    *STORE ADDRESS TO DISPLACE FROM IN D5
000019D8  B83C 0000               1031                      CMP.B #$00,D4    *CHECK IF DISPLACEMENT IS WORD                    
000019DC  6700 001E               1032                      BEQ BCC_DISP_WORD   *GRAB NEXT WORD FOR DISPLACEMENT
000019E0  B83C 00FF               1033                      CMP.B #$FF,D4        *CHECK IF DISPLACEMENT LONG
000019E4  6700 0042               1034                      BEQ BCC_DISP_LONG
000019E8  6000 0002               1035                      BRA BCC_DISP_BYTE
000019EC  4404                    1036  BCC_DISP_BYTE       NEG.B D4            *GET THE INVERSE OF 8-BIT DISPLACEMENT (8-BIT IS ALWAYS NEGATIVE)
000019EE  9A84                    1037                      SUB.L D4,D5         *SUBTRACT DISPLACEMENT FROM STARTING ADDRESS
000019F0  2205                    1038                      MOVE.L D5,D1        *MOVE TO DISPLAY ADDRESS                  
000019F2  103C 0003               1039                      MOVE.B #3,D0    
000019F6  4E4F                    1040                      TRAP #15
000019F8  6000 003E               1041                      BRA EXIT_BCC_LOOP
000019FC  381E                    1042  BCC_DISP_WORD       MOVE.W (A6)+,D4     *GRAB THE DISPLACEMENT
000019FE  B87C 0000               1043                      CMP.W #0,D4
00001A02  6D00 0006               1044                      BLT BCC_DISP_WORD_NEG
00001A06  6000 0012               1045                      BRA BCC_DISP_WORD_POS
00001A0A  4444                    1046  BCC_DISP_WORD_NEG   NEG D4              *GET THE INVERSE OF 16-BIT DISPLACEMENT FOR NEGATIVE NUMBERS
00001A0C  9A84                    1047                      SUB.L D4,D5
00001A0E  2205                    1048                      MOVE.L D5,D1        *PRINT ADDRESS WITH DISPLACEMENT
00001A10  4EB9 00002920           1049                      JSR PRINT_HEX
00001A16  6000 0020               1050                      BRA EXIT_BCC_LOOP
00001A1A  DA84                    1051  BCC_DISP_WORD_POS   ADD.L D4,D5 
00001A1C  2205                    1052                      MOVE.L D5,D1
00001A1E                          1053                                      *PRINT ADDRESS WITH DISPLACEMENT
00001A1E  4EB9 00002920           1054                      JSR PRINT_HEX
00001A24  6000 0012               1055                      BRA EXIT_BCC_LOOP                           
00001A28  281E                    1056  BCC_DISP_LONG       MOVE.L (A6)+,D4
00001A2A  DA84                    1057                      ADD.L D4,D5
00001A2C  2205                    1058                      MOVE.L D5,D1
00001A2E  4EB9 00002920           1059                      JSR PRINT_HEX
00001A34  6000 0002               1060                      BRA EXIT_BCC_LOOP
00001A38  4E75                    1061  EXIT_BCC_LOOP       RTS              *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
00001A3A                          1062  
00001A3A                          1063  ******************************************************************************************************************
00001A3A                          1064                 
00001A3A  7800                    1065  CHECK_NEG_CONST     MOVE.L #0,D4        *CLEAR THE REGISTERS TO BE USED
00001A3C  7200                    1066                      MOVE.L #0,D1
00001A3E  1C3C 0002               1067                      MOVE.B #2,D6        *GET THE SIZE BITS (2)
00001A42  4EB9 000028F2           1068                      JSR BITARR_TO_INT
00001A48  1607                    1069                      MOVE.B D7,D3        *STORE SIZE IN D3
00001A4A  1C3C 0003               1070                      MOVE.B #3,D6
00001A4E  4EB9 000028F2           1071                      JSR BITARR_TO_INT   *GET THE <EA> MODE BITS (3) AND STORE IN D2
00001A54  1407                    1072                      MOVE.B D7,D2
00001A56  1C3C 0003               1073                      MOVE.B #3,D6
00001A5A  4EB9 000028F2           1074                      JSR BITARR_TO_INT   *GET THE <EA> REGISTER AND STORE IN D1
00001A60  1207                    1075                      MOVE.B D7,D1
00001A62  43F9 00002C5F           1076                      LEA NEG_TEXT,A1     *OUTPUT 'NEG'
00001A68  103C 000E               1077                      MOVE.B #14,D0
00001A6C  4E4F                    1078                      TRAP #15
00001A6E  B63C 0000               1079                      CMP.B #0,D3         *PRINT SIZE CODE
00001A72  6700 000E               1080                      BEQ NEG_BYTE
00001A76  B63C 0001               1081                      CMP.B #1,D3
00001A7A  6700 0012               1082                      BEQ NEG_WORD        
00001A7E  6000 001A               1083                      BRA NEG_LONG
00001A82  43F9 00002BB4           1084  NEG_BYTE            LEA BYTE_TEXT,A1                    
00001A88  4E4F                    1085                      TRAP #15
00001A8A  6000 0016               1086                      BRA NEG_CONT
00001A8E  43F9 00002BB8           1087  NEG_WORD            LEA WORD_TEXT,A1
00001A94  4E4F                    1088                      TRAP #15
00001A96  6000 000A               1089                      BRA NEG_CONT
00001A9A  43F9 00002BBC           1090  NEG_LONG            LEA LONG_TEXT,A1
00001AA0  4E4F                    1091                      TRAP #15                    
00001AA2  43F9 00002BB2           1092  NEG_CONT            LEA SPACE_TEXT,A1   *PRINT SPACE
00001AA8  4E4F                    1093                      TRAP #15
00001AAA  4EB9 00002A80           1094                      JSR PRINT_TOKEN
00001AB0  4EB9 00002A72           1095                      JSR PRINT_NEXT_LINE
00001AB6  4E75                    1096                      RTS
00001AB8  4E72 2700               1097                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
00001ABC                          1098                      
00001ABC  7800                    1099  CHECK_CMPI_CONST    MOVE.L #0,D4        *CLEAR THE REGISTERS TO BE USED
00001ABE  7200                    1100                      MOVE.L #0,D1
00001AC0  1C3C 0002               1101                      MOVE.B #2,D6        *GET THE SIZE BITS (2)
00001AC4  4EB9 000028F2           1102                      JSR BITARR_TO_INT
00001ACA  1607                    1103                      MOVE.B D7,D3        *STORE SIZE IN D3
00001ACC  1C3C 0003               1104                      MOVE.B #3,D6
00001AD0  4EB9 000028F2           1105                      JSR BITARR_TO_INT   *GET THE <EA> MODE BITS (3) AND STORE IN D2
00001AD6  1407                    1106                      MOVE.B D7,D2
00001AD8  1C3C 0003               1107                      MOVE.B #3,D6
00001ADC  4EB9 000028F2           1108                      JSR BITARR_TO_INT   *GET THE <EA> REGISTER AND STORE IN D1
00001AE2  1807                    1109                      MOVE.B D7,D4
00001AE4  43F9 00002C25           1110                      LEA CMPI_TEXT,A1    *PRINT CMPI
00001AEA  103C 000E               1111                      MOVE.B #14,D0
00001AEE  4E4F                    1112                      TRAP #15
00001AF0  B63C 0000               1113                      CMP.B #BYTE_CODE,D3
00001AF4  6700 000E               1114                      BEQ CMPI_PRINT_BYTE
00001AF8  B63C 0001               1115                      CMP.B #WORD_CODE,D3
00001AFC  6700 0016               1116                      BEQ CMPI_PRINT_WORD
00001B00  6000 0022               1117                      BRA CMPI_PRINT_LONG
00001B04  43F9 00002BB4           1118  CMPI_PRINT_BYTE     LEA BYTE_TEXT,A1
00001B0A  103C 000E               1119                      MOVE.B #14,D0
00001B0E  4E4F                    1120                      TRAP #15
00001B10  6000 0022               1121                      BRA CMPI_CONT
00001B14  43F9 00002BB8           1122  CMPI_PRINT_WORD     LEA WORD_TEXT,A1
00001B1A  103C 000E               1123                      MOVE.B #14,D0
00001B1E  4E4F                    1124                      TRAP #15
00001B20  6000 0012               1125                      BRA CMPI_CONT
00001B24  43F9 00002BBC           1126  CMPI_PRINT_LONG     LEA LONG_TEXT,A1
00001B2A  103C 000E               1127                      MOVE.B #14,D0
00001B2E  4E4F                    1128                      TRAP #15
00001B30  6000 0002               1129                      BRA CMPI_CONT                   
00001B34  43F9 00002BB2           1130  CMPI_CONT           LEA SPACE_TEXT,A1
00001B3A  4E4F                    1131                      TRAP #15
00001B3C  4EB9 000029A8           1132                      JSR PRINT_IMM       *PRINT THE DATA
00001B42  1204                    1133                      MOVE.B D4,D1
00001B44  43F9 00002B9E           1134                      LEA COMMA_TEXT,A1
00001B4A  103C 000E               1135                      MOVE.B #14,D0
00001B4E  4E4F                    1136                      TRAP #15
00001B50  4EB9 00002A80           1137                      JSR PRINT_TOKEN
00001B56  4EB9 00002A72           1138                      JSR PRINT_NEXT_LINE
00001B5C  4E75                    1139                      RTS
00001B5E  4E72 2700               1140                      STOP #EXIT           *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
00001B62                          1141  
00001B62  7800                    1142  CHECK_ORI_CONST     MOVE.L #0,D4        *CLEAR THE REGISTERS TO BE USED
00001B64  7200                    1143                      MOVE.L #0,D1
00001B66  1C3C 0002               1144                      MOVE.B #2,D6        *GET THE SIZE BITS (2)
00001B6A  4EB9 000028F2           1145                      JSR BITARR_TO_INT
00001B70  1607                    1146                      MOVE.B D7,D3        *STORE SIZE IN D3
00001B72  1C3C 0003               1147                      MOVE.B #3,D6
00001B76  4EB9 000028F2           1148                      JSR BITARR_TO_INT   *GET THE <EA> MODE BITS (3) AND STORE IN D2
00001B7C  1407                    1149                      MOVE.B D7,D2
00001B7E  1C3C 0003               1150                      MOVE.B #3,D6
00001B82  4EB9 000028F2           1151                      JSR BITARR_TO_INT   *GET THE <EA> REGISTER AND STORE IN D1
00001B88  1807                    1152                      MOVE.B D7,D4
00001B8A  43F9 00002C66           1153                      LEA ORI_TEXT,A1    *PRINT CMPI
00001B90  103C 000E               1154                      MOVE.B #14,D0
00001B94  4E4F                    1155                      TRAP #15
00001B96  B63C 0000               1156                      CMP.B #0,D3         *PRINT SIZE CODE
00001B9A  6700 000E               1157                      BEQ ORI_BYTE
00001B9E  B63C 0001               1158                      CMP.B #1,D3
00001BA2  6700 0012               1159                      BEQ ORI_WORD
00001BA6  6000 001A               1160                      BRA ORI_LONG
00001BAA  43F9 00002BB4           1161  ORI_BYTE            LEA BYTE_TEXT,A1
00001BB0  4E4F                    1162                      TRAP #15
00001BB2  6000 0016               1163                      BRA ORI_CONT
00001BB6  43F9 00002BB8           1164  ORI_WORD            LEA WORD_TEXT,A1
00001BBC  4E4F                    1165                      TRAP #15
00001BBE  6000 000A               1166                      BRA ORI_CONT
00001BC2  43F9 00002BBC           1167  ORI_LONG            LEA LONG_TEXT,A1
00001BC8  4E4F                    1168                      TRAP #15                    
00001BCA  4EB9 000029A8           1169  ORI_CONT            JSR PRINT_IMM       *PRINT THE DATA
00001BD0  1204                    1170                      MOVE.B D4,D1
00001BD2  43F9 00002B9E           1171                      LEA COMMA_TEXT,A1
00001BD8  103C 000E               1172                      MOVE.B #14,D0
00001BDC  4E4F                    1173                      TRAP #15
00001BDE  4EB9 00002A80           1174                      JSR PRINT_TOKEN
00001BE4  4EB9 00002A72           1175                      JSR PRINT_NEXT_LINE
00001BEA  4E75                    1176                      RTS
00001BEC  4E72 2700               1177                      STOP #EXIT           *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!
00001BF0                          1178  
00001BF0                          1179                       
00001BF0                          1180  
00001BF0                          1181  
00001BF0                          1182  
00001BF0                          1183  
00001BF0                          1184  *******************************4 BITS******************************
00001BF0                          1185  *NEEDS TESTING
00001BF0  7200                    1186  CHECK_ADD           MOVE.L #0,D1 *CLEAR D1 FOR OUTPUT
00001BF2                          1187                      *READ REGISTER (3 BITS) INTO D4
00001BF2  1C3C 0003               1188                      MOVE.B #3,D6
00001BF6  4EB9 000028F2           1189                      JSR BITARR_TO_INT
00001BFC  1807                    1190                      MOVE.B D7,D4
00001BFE                          1191                      *READ OPMODE (3 BITS) INTO D5
00001BFE  1C3C 0003               1192                      MOVE.B #3,D6
00001C02  4EB9 000028F2           1193                      JSR BITARR_TO_INT
00001C08  1A07                    1194                      MOVE.B D7,D5
00001C0A                          1195                      *READ EA MODE (3 BITS) INTO D2
00001C0A  1C3C 0003               1196                      MOVE.B #3,D6
00001C0E  4EB9 000028F2           1197                      JSR BITARR_TO_INT
00001C14  1407                    1198                      MOVE.B D7,D2
00001C16                          1199                      *READ EA REGISTER (3 BITS) INTO D7
00001C16  1C3C 0003               1200                      MOVE.B #3,D6
00001C1A  4EB9 000028F2           1201                      JSR BITARR_TO_INT
00001C20                          1202                      *STORE 14 IN D0 TO PREPARE FOR OUTPUT
00001C20  103C 000E               1203                      MOVE.B #14,D0
00001C24                          1204                      *DO THE REST, ACCORDING TO OPMODE
00001C24  BA3C 0000               1205                      CMP.B #BYTE_TO_DN_CONST,D5
00001C28  6700 0090               1206                      BEQ ADD_BYTE_TO_DN
00001C2C  BA3C 0004               1207                      CMP.B #BYTE_TO_EA_CONST,D5
00001C30  6700 010C               1208                      BEQ ADD_BYTE_TO_EA
00001C34  BA3C 0001               1209                      CMP.B #WORD_TO_DN_CONST,D5
00001C38  6700 00AC               1210                      BEQ ADD_WORD_TO_DN
00001C3C  BA3C 0005               1211                      CMP.B #WORD_TO_EA_CONST,D5
00001C40  6700 012A               1212                      BEQ ADD_WORD_TO_EA
00001C44  BA3C 0002               1213                      CMP.B #LONG_TO_DN_CONST,D5
00001C48  6700 00C8               1214                      BEQ ADD_LONG_TO_DN
00001C4C  BA3C 0006               1215                      CMP.B #LONG_TO_EA_CONST,D5
00001C50  6700 0148               1216                      BEQ ADD_LONG_TO_EA
00001C54  BA3C 0003               1217                      CMP.B #WORD_TO_AN_CONST,D5
00001C58  6700 0030               1218                      BEQ ADD_WORD_TO_AN
00001C5C                          1219                      *ELSE ADD LONG TO AN
00001C5C  163C 0002               1220                      MOVE.B #LONG_CODE,D3
00001C60  43F9 00002BC4           1221                      LEA ADDA_TEXT,A1
00001C66  4E4F                    1222                      TRAP #15
00001C68  43F9 00002BBC           1223                      LEA LONG_TEXT,A1
00001C6E  4E4F                    1224                      TRAP #15
00001C70                          1225                      *PRINT EA
00001C70  1207                    1226                      MOVE.B D7,D1
00001C72  4EB9 00002A80           1227                      JSR PRINT_TOKEN
00001C78                          1228                      *PRINT COMMA
00001C78  4EB9 00002912           1229                      JSR PRINT_COMMA
00001C7E                          1230                      *PRINT AN
00001C7E  1204                    1231                      MOVE.B D4,D1
00001C80  4EB9 000029FE           1232                      JSR PRINT_AN
00001C86  6000 0140               1233                      BRA ADD_CLEANUP
00001C8A  163C 0001               1234  ADD_WORD_TO_AN      MOVE.B #WORD_CODE,D3
00001C8E  43F9 00002BC4           1235                      LEA ADDA_TEXT,A1
00001C94  4E4F                    1236                      TRAP #15
00001C96  43F9 00002BB8           1237                      LEA WORD_TEXT,A1
00001C9C  4E4F                    1238                      TRAP #15
00001C9E                          1239                      *PRINT EA
00001C9E  7200                    1240                      MOVE.L #0,D1 *CLEAR OUT D1 FOR OUTPUT
00001CA0  1207                    1241                      MOVE.B D7,D1
00001CA2  4EB9 00002A80           1242                      JSR PRINT_TOKEN
00001CA8  4EB9 00002912           1243                      JSR PRINT_COMMA
00001CAE                          1244                      *PRINT AN
00001CAE  1204                    1245                      MOVE.B D4,D1
00001CB0  4EB9 000029FE           1246                      JSR PRINT_AN
00001CB6  6000 0110               1247                      BRA ADD_CLEANUP
00001CBA  163C 0000               1248  ADD_BYTE_TO_DN      MOVE.B #BYTE_CODE,D3
00001CBE  4EB9 00001DD4           1249                      JSR PRINT_ADD_OR_ADDI
00001CC4  43F9 00002BB4           1250                      LEA BYTE_TEXT,A1
00001CCA  4E4F                    1251                      TRAP #15
00001CCC                          1252                      *PRINT EA
00001CCC  1207                    1253                      MOVE.B D7,D1
00001CCE  4EB9 00002A80           1254                      JSR PRINT_TOKEN
00001CD4  4EB9 00002912           1255                      JSR PRINT_COMMA
00001CDA                          1256                      *PRINT DN
00001CDA  1204                    1257                      MOVE.B D4,D1
00001CDC  4EB9 000029EA           1258                      JSR PRINT_DN
00001CE2  6000 00E4               1259                      BRA ADD_CLEANUP
00001CE6  163C 0001               1260  ADD_WORD_TO_DN      MOVE.B #WORD_CODE,D3
00001CEA  4EB9 00001DD4           1261                      JSR PRINT_ADD_OR_ADDI
00001CF0  43F9 00002BB8           1262                      LEA WORD_TEXT,A1
00001CF6  4E4F                    1263                      TRAP #15
00001CF8                          1264                      *PRINT EA
00001CF8  1207                    1265                      MOVE.B D7,D1
00001CFA  4EB9 00002A80           1266                      JSR PRINT_TOKEN
00001D00  4EB9 00002912           1267                      JSR PRINT_COMMA
00001D06                          1268                      *PRINT DN
00001D06  1204                    1269                      MOVE.B D4,D1
00001D08  4EB9 000029EA           1270                      JSR PRINT_DN
00001D0E  6000 00B8               1271                      BRA ADD_CLEANUP
00001D12  163C 0002               1272  ADD_LONG_TO_DN      MOVE.B #LONG_CODE,D3
00001D16  4EB9 00001DD4           1273                      JSR PRINT_ADD_OR_ADDI
00001D1C  43F9 00002BBC           1274                      LEA LONG_TEXT,A1
00001D22  4E4F                    1275                      TRAP #15
00001D24                          1276                      *PRINT EA
00001D24  1207                    1277                      MOVE.B D7,D1
00001D26  4EB9 00002A80           1278                      JSR PRINT_TOKEN
00001D2C  4EB9 00002912           1279                      JSR PRINT_COMMA
00001D32                          1280                      *PRINT DN
00001D32  1204                    1281                      MOVE.B D4,D1
00001D34  4EB9 000029EA           1282                      JSR PRINT_DN
00001D3A  6000 008C               1283                      BRA ADD_CLEANUP
00001D3E  163C 0000               1284  ADD_BYTE_TO_EA      MOVE.B #BYTE_CODE,D3
00001D42  43F9 00002BC0           1285                      LEA ADD_TEXT,A1
00001D48  4E4F                    1286                      TRAP #15
00001D4A  43F9 00002BB4           1287                      LEA BYTE_TEXT,A1
00001D50  4E4F                    1288                      TRAP #15
00001D52                          1289                      *PRINT DN
00001D52  1204                    1290                      MOVE.B D4,D1
00001D54  4EB9 000029EA           1291                      JSR PRINT_DN
00001D5A  4EB9 00002912           1292                      JSR PRINT_COMMA
00001D60                          1293                      *PRINT EA
00001D60  1207                    1294                      MOVE.B D7,D1
00001D62  4EB9 00002A80           1295                      JSR PRINT_TOKEN
00001D68  6000 005E               1296                      BRA ADD_CLEANUP
00001D6C  163C 0001               1297  ADD_WORD_TO_EA      MOVE.B #WORD_CODE,D3
00001D70  43F9 00002BC0           1298                      LEA ADD_TEXT,A1
00001D76  4E4F                    1299                      TRAP #15
00001D78  43F9 00002BB8           1300                      LEA WORD_TEXT,A1
00001D7E  4E4F                    1301                      TRAP #15
00001D80                          1302                      *PRINT DN
00001D80  1204                    1303                      MOVE.B D4,D1
00001D82  4EB9 000029EA           1304                      JSR PRINT_DN
00001D88  4EB9 00002912           1305                      JSR PRINT_COMMA
00001D8E                          1306                      *PRINT EA
00001D8E  1207                    1307                      MOVE.B D7,D1
00001D90  4EB9 00002A80           1308                      JSR PRINT_TOKEN
00001D96  6000 0030               1309                      BRA ADD_CLEANUP
00001D9A  163C 0002               1310  ADD_LONG_TO_EA      MOVE.B #LONG_CODE,D3
00001D9E  43F9 00002BC0           1311                      LEA ADD_TEXT,A1
00001DA4  4E4F                    1312                      TRAP #15
00001DA6  43F9 00002BBC           1313                      LEA LONG_TEXT,A1
00001DAC  4E4F                    1314                      TRAP #15
00001DAE                          1315                      *PRINT DN
00001DAE  1204                    1316                      MOVE.B D4,D1
00001DB0  4EB9 000029EA           1317                      JSR PRINT_DN
00001DB6  4EB9 00002912           1318                      JSR PRINT_COMMA
00001DBC                          1319                      *PRINT EA
00001DBC  1207                    1320                      MOVE.B D7,D1
00001DBE  4EB9 00002A80           1321                      JSR PRINT_TOKEN
00001DC4                          1322  
00001DC4  6000 0002               1323                      BRA ADD_CLEANUP
00001DC8  4EB9 00002A72           1324  ADD_CLEANUP         JSR PRINT_NEXT_LINE
00001DCE  4E75                    1325                      RTS
00001DD0  4E72 2700               1326                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00001DD4                          1327  
00001DD4                          1328                      *PRINTS ADD OR ADDI, BASED ON THE EA MODE (D2) AND EA ADDRESS (D7)
00001DD4  B43C 0007               1329  PRINT_ADD_OR_ADDI   CMP.B #LITERAL_CONST,D2
00001DD8  6600 0014               1330                      BNE PRINT_ADD
00001DDC  BE3C 0004               1331                      CMP.B #IMMEDIATE_CONST,D7
00001DE0  6600 000C               1332                      BNE PRINT_ADD
00001DE4                          1333                      *IF BOTH WERE THE SPECIFIED VALUES, IT'S ADDI
00001DE4  43F9 00002BC9           1334                      LEA ADDI_TEXT,A1
00001DEA  6000 0008               1335                      BRA PAOAI_CLEANUP
00001DEE  43F9 00002BC0           1336  PRINT_ADD           LEA ADD_TEXT,A1
00001DF4  103C 000E               1337  PAOAI_CLEANUP       MOVE.B #14,D0
00001DF8  4E4F                    1338                      TRAP #15
00001DFA  4E75                    1339                      RTS
00001DFC                          1340                      
00001DFC                          1341  *NEEDS TESTING
00001DFC  7200                    1342  CHECK_SUB            MOVE.L #0,D1 *CLEAR D1 FOR OUTPUT
00001DFE                          1343                      *READ REGISTER (3 BITS) INTO D4
00001DFE  1C3C 0003               1344                      MOVE.B #3,D6
00001E02  4EB9 000028F2           1345                      JSR BITARR_TO_INT
00001E08  1807                    1346                      MOVE.B D7,D4
00001E0A                          1347                      *READ OPMODE (3 BITS) INTO D5
00001E0A  1C3C 0003               1348                      MOVE.B #3,D6
00001E0E  4EB9 000028F2           1349                      JSR BITARR_TO_INT
00001E14  1A07                    1350                      MOVE.B D7,D5
00001E16                          1351                      *READ EA MODE (3 BITS) INTO D2
00001E16  1C3C 0003               1352                      MOVE.B #3,D6
00001E1A  4EB9 000028F2           1353                      JSR BITARR_TO_INT
00001E20  1407                    1354                      MOVE.B D7,D2
00001E22                          1355                      *READ EA REGISTER (3 BITS) INTO D7
00001E22  1C3C 0003               1356                      MOVE.B #3,D6
00001E26  4EB9 000028F2           1357                      JSR BITARR_TO_INT
00001E2C                          1358                      *STORE 14 IN D0 TO PREPARE FOR OUTPUT
00001E2C  103C 000E               1359                      MOVE.B #14,D0
00001E30                          1360                      *DO THE REST, ACCORDING TO OPMODE
00001E30  BA3C 0000               1361                      CMP.B #BYTE_TO_DN_CONST,D5
00001E34  6700 008E               1362                      BEQ SUB_BYTE_TO_DN
00001E38  BA3C 0004               1363                      CMP.B #BYTE_TO_EA_CONST,D5
00001E3C  6700 010A               1364                      BEQ SUB_BYTE_TO_EA
00001E40  BA3C 0001               1365                      CMP.B #WORD_TO_DN_CONST,D5
00001E44  6700 00AA               1366                      BEQ SUB_WORD_TO_DN
00001E48  BA3C 0005               1367                      CMP.B #WORD_TO_EA_CONST,D5
00001E4C  6700 0128               1368                      BEQ SUB_WORD_TO_EA
00001E50  BA3C 0002               1369                      CMP.B #LONG_TO_DN_CONST,D5
00001E54  6700 00C6               1370                      BEQ SUB_LONG_TO_DN
00001E58  BA3C 0006               1371                      CMP.B #LONG_TO_EA_CONST,D5
00001E5C  6700 0148               1372                      BEQ SUB_LONG_TO_EA
00001E60  BA3C 0003               1373                      CMP.B #WORD_TO_AN_CONST,D5
00001E64  6700 0030               1374                      BEQ SUB_WORD_TO_AN
00001E68                          1375                      *ELSE SUB LONG TO AN
00001E68  163C 0002               1376                      MOVE.B #LONG_CODE,D3
00001E6C  43F9 00002C7A           1377                      LEA SUBA_TEXT,A1
00001E72  4E4F                    1378                      TRAP #15
00001E74  43F9 00002BBC           1379                      LEA LONG_TEXT,A1
00001E7A  4E4F                    1380                      TRAP #15
00001E7C                          1381                      *PRINT EA
00001E7C  1207                    1382                      MOVE.B D7,D1
00001E7E  4EB9 00002A80           1383                      JSR PRINT_TOKEN
00001E84  4EB9 00002912           1384                      JSR PRINT_COMMA
00001E8A                          1385                      *PRINT AN
00001E8A  1204                    1386                      MOVE.B D4,D1
00001E8C  4EB9 000029FE           1387                      JSR PRINT_AN
00001E92  6000 013C               1388                      BRA SUB_CLEANUP
00001E96  163C 0001               1389  SUB_WORD_TO_AN      MOVE.B #WORD_CODE,D3
00001E9A  43F9 00002C7A           1390                      LEA SUBA_TEXT,A1
00001EA0  4E4F                    1391                      TRAP #15
00001EA2  43F9 00002BB8           1392                      LEA WORD_TEXT,A1
00001EA8  4E4F                    1393                      TRAP #15
00001EAA                          1394                      *PRINT EA
00001EAA  1207                    1395                      MOVE.B D7,D1
00001EAC  4EB9 00002A80           1396                      JSR PRINT_TOKEN
00001EB2  4EB9 00002912           1397                      JSR PRINT_COMMA
00001EB8                          1398                      *PRINT AN
00001EB8  1204                    1399                      MOVE.B D4,D1
00001EBA  4EB9 000029FE           1400                      JSR PRINT_AN
00001EC0  6000 010E               1401                      BRA SUB_CLEANUP
00001EC4  163C 0000               1402  SUB_BYTE_TO_DN      MOVE.B #BYTE_CODE,D3
00001EC8  4EB9 00001FDC           1403                      JSR PRINT_SUB_OR_SUBI
00001ECE  43F9 00002BB4           1404                      LEA BYTE_TEXT,A1
00001ED4  4E4F                    1405                      TRAP #15
00001ED6                          1406                      *PRINT EA
00001ED6  1207                    1407                      MOVE.B D7,D1
00001ED8  4EB9 00002A80           1408                      JSR PRINT_TOKEN
00001EDE  4EB9 00002912           1409                      JSR PRINT_COMMA
00001EE4                          1410                      *PRINT DN
00001EE4  1204                    1411                      MOVE.B D4,D1
00001EE6  4EB9 000029EA           1412                      JSR PRINT_DN
00001EEC  6000 00E2               1413                      BRA SUB_CLEANUP
00001EF0  163C 0001               1414  SUB_WORD_TO_DN      MOVE.B #WORD_CODE,D3
00001EF4  4EB9 00001FDC           1415                      JSR PRINT_SUB_OR_SUBI
00001EFA  43F9 00002BB8           1416                      LEA WORD_TEXT,A1
00001F00  4E4F                    1417                      TRAP #15
00001F02                          1418                      *PRINT EA
00001F02  1207                    1419                      MOVE.B D7,D1
00001F04  4EB9 00002A80           1420                      JSR PRINT_TOKEN
00001F0A  4EB9 00002912           1421                      JSR PRINT_COMMA
00001F10                          1422                      *PRINT DN
00001F10  1204                    1423                      MOVE.B D4,D1
00001F12  4EB9 000029EA           1424                      JSR PRINT_DN
00001F18  6000 00B6               1425                      BRA SUB_CLEANUP
00001F1C  163C 0002               1426  SUB_LONG_TO_DN      MOVE.B #LONG_CODE,D3
00001F20  4EB9 00001FDC           1427                      JSR PRINT_SUB_OR_SUBI
00001F26  43F9 00002BBC           1428                      LEA LONG_TEXT,A1
00001F2C  4E4F                    1429                      TRAP #15
00001F2E                          1430                      *PRINT EA
00001F2E  1207                    1431                      MOVE.B D7,D1
00001F30  4EB9 00002A80           1432                      JSR PRINT_TOKEN
00001F36  4EB9 00002912           1433                      JSR PRINT_COMMA
00001F3C                          1434                      *PRINT DN
00001F3C  1204                    1435                      MOVE.B D4,D1
00001F3E  4EB9 000029EA           1436                      JSR PRINT_DN
00001F44  6000 008A               1437                      BRA SUB_CLEANUP
00001F48  163C 0000               1438  SUB_BYTE_TO_EA      MOVE.B #BYTE_CODE,D3
00001F4C  43F9 00002C76           1439                      LEA SUB_TEXT,A1
00001F52  4E4F                    1440                      TRAP #15
00001F54  43F9 00002BB4           1441                      LEA BYTE_TEXT,A1
00001F5A  4E4F                    1442                      TRAP #15
00001F5C                          1443                      *PRINT DN
00001F5C  1204                    1444                      MOVE.B D4,D1
00001F5E  4EB9 000029EA           1445                      JSR PRINT_DN
00001F64  4EB9 00002912           1446                      JSR PRINT_COMMA
00001F6A                          1447                      *PRINT EA
00001F6A  1207                    1448                      MOVE.B D7,D1
00001F6C  4EB9 00002A80           1449                      JSR PRINT_TOKEN
00001F72  6000 005C               1450                      BRA SUB_CLEANUP
00001F76  163C 0001               1451  SUB_WORD_TO_EA      MOVE.B #WORD_CODE,D3
00001F7A  43F9 00002C76           1452                      LEA SUB_TEXT,A1
00001F80  4E4F                    1453                      TRAP #15
00001F82  43F9 00002BB8           1454                      LEA WORD_TEXT,A1
00001F88  4E4F                    1455                      TRAP #15
00001F8A                          1456                      *PRINT DN
00001F8A  1204                    1457                      MOVE.B D4,D1
00001F8C  4EB9 000029EA           1458                      JSR PRINT_DN
00001F92  4EB9 00002912           1459                      JSR PRINT_COMMA
00001F98                          1460                      *PRINT EA
00001F98  7200                    1461                      MOVE.L #0,D1 *CLEAR OUT D1 FOR OUTPUT
00001F9A  1207                    1462                      MOVE.B D7,D1
00001F9C  4EB9 00002A80           1463                      JSR PRINT_TOKEN
00001FA2  6000 002C               1464                      BRA SUB_CLEANUP
00001FA6  163C 0002               1465  SUB_LONG_TO_EA      MOVE.B #LONG_CODE,D3
00001FAA  43F9 00002C76           1466                      LEA SUB_TEXT,A1
00001FB0  4E4F                    1467                      TRAP #15
00001FB2  43F9 00002BBC           1468                      LEA LONG_TEXT,A1
00001FB8  4E4F                    1469                      TRAP #15
00001FBA                          1470                      *PRINT DN
00001FBA  1204                    1471                      MOVE.B D4,D1
00001FBC  4EB9 000029EA           1472                      JSR PRINT_DN
00001FC2  4EB9 00002912           1473                      JSR PRINT_COMMA
00001FC8                          1474                      *PRINT EA
00001FC8  1207                    1475                      MOVE.B D7,D1
00001FCA  4EB9 00002A80           1476                      JSR PRINT_TOKEN
00001FD0  4EB9 00002A72           1477  SUB_CLEANUP         JSR PRINT_NEXT_LINE
00001FD6  4E75                    1478                      RTS
00001FD8  4E72 2700               1479                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00001FDC                          1480  
00001FDC                          1481                      *PRINTS SUB OR SUBI, BASED ON THE EA MODE (D2) AND EA ADDRESS (D7)
00001FDC  B43C 0007               1482  PRINT_SUB_OR_SUBI   CMP.B #LITERAL_CONST,D2
00001FE0  6600 0014               1483                      BNE PRINT_SUB
00001FE4  BE3C 0004               1484                      CMP.B #IMMEDIATE_CONST,D7
00001FE8  6600 000C               1485                      BNE PRINT_SUB
00001FEC                          1486                      *IF BOTH WERE THE SPECIFIED VALUES, IT'S SUBI
00001FEC  43F9 00002C7F           1487                      LEA SUBI_TEXT,A1
00001FF2  6000 0008               1488                      BRA PSOSI_CLEANUP
00001FF6  43F9 00002C76           1489  PRINT_SUB           LEA SUB_TEXT,A1
00001FFC  103C 000E               1490  PSOSI_CLEANUP       MOVE.B #14,D0
00002000  4E4F                    1491                      TRAP #15
00002002  4E75                    1492                      RTS
00002004                          1493                      
00002004                          1494                      *FOR USE BY CHECK_ADD AND CHECK_SUB
00002004                          1495                      *CHECKS THE VALIDITY OF THE EA MODE AND BRANCHES APPROPRIATELY USING THE MODE IN D2 AND REGISTER IN D7
00002004                          1496                      *NOTE THAT IT MAY BRANCH SOMEWHERE ELSE INSTEAD OF RETURNING TO THE CALLER
00002004                          1497  ADDSUB_CHECK_EA     *CHECK REGISTER BITS IF LITERAL
00002004  B43C 0007               1498                      CMP.B #LITERAL_CONST,D2
00002008  6700 0014               1499                      BEQ ADDSUB_LITERAL
0000200C                          1500                      *UNSUPPORTED IF DISPLACEMENT
0000200C  B43C 0005               1501                      CMP.B #D16_AN_CONST,D2
00002010  6700 0022               1502                      BEQ ADDSUB_UNSUPPORTED
00002014  B43C 0006               1503                      CMP.B #D8_AN_XN_CONST,D2
00002018  6700 001A               1504                      BEQ ADDSUB_UNSUPPORTED
0000201C                          1505                      *ELSE WE'RE GOOD; GO BACK
0000201C  4E75                    1506                      RTS
0000201E                          1507  ADDSUB_LITERAL      *VALID IF ADDRESS OR IMMEDIATE
0000201E  BE3C 0000               1508                      CMP.B #WORD_ADDRESS_CONST,D7
00002022  4E75                    1509                      RTS
00002024  BE3C 0001               1510                      CMP.B #LONG_ADDRESS_CONST,D7
00002028  4E75                    1511                      RTS
0000202A  BE3C 0004               1512                      CMP.B #IMMEDIATE_CONST,D7
0000202E  4E75                    1513                      RTS
00002030  6000 0002               1514                      BRA ADDSUB_UNSUPPORTED
00002034  554F                    1515  ADDSUB_UNSUPPORTED  SUBA #WORDS_PER_LONG_CONST,SP *REMOVE THE FUNCTION CALL FROM THE STACK, SINCE WE AREN'T RETURNING PROPERLY
00002036  6000 F2A6               1516                      BRA UNSUPPORTED_OP
0000203A                          1517                      
0000203A  103C 000E               1518  CHECK_CMP_EOR       MOVE.B #14,D0 *PREP FOR OUTPUT
0000203E  7200                    1519                      MOVE.L #0,D1 *CLEAR D1 FOR OUTPUT
00002040                          1520                      *READ SOURCE REGISTER (3 BITS) TO D4
00002040  1C3C 0003               1521                      MOVE.B #3,D6
00002044  4EB9 000028F2           1522                      JSR BITARR_TO_INT
0000204A  1807                    1523                      MOVE.B D7,D4
0000204C                          1524                      *READ OPMODE (3 BITS) TO D5
0000204C  1C3C 0003               1525                      MOVE.B #3,D6
00002050  4EB9 000028F2           1526                      JSR BITARR_TO_INT
00002056  1A07                    1527                      MOVE.B D7,D5
00002058                          1528                      *READ DESTINATION MODE (3 BITS) TO D2
00002058  1C3C 0003               1529                      MOVE.B #3,D6
0000205C  4EB9 000028F2           1530                      JSR BITARR_TO_INT
00002062  1407                    1531                      MOVE.B D7,D2
00002064                          1532                      *READ DESTINATION REGISTER (3 BITS) TO D7
00002064  1C3C 0003               1533                      MOVE.B #3,D6
00002068  4EB9 000028F2           1534                      JSR BITARR_TO_INT
0000206E                          1535                      
0000206E                          1536                      *IF LITERAL, MAKE SURE VALID REG BITS
0000206E  B43C 0007               1537                      CMP.B #LITERAL_CONST,D2
00002072  6700 010E               1538                      BEQ CMP_CHECK_LIT
00002076                          1539                      
00002076                          1540                      *DETERMINE CMP/EOR, AND IF CMP, STORE DESTINATION EA MODE IN D6 AND SIZE IN D3, BASED ON OPMODE
00002076  BA3C 0000               1541  CMP_PROCESS         CMP.B #BYTE_TO_DN_CONST,D5
0000207A  6700 003A               1542                      BEQ CMP_BYTE_TO_DN
0000207E  BA3C 0001               1543                      CMP.B #WORD_TO_DN_CONST,D5
00002082  6700 003E               1544                      BEQ CMP_WORD_TO_DN
00002086  BA3C 0002               1545                      CMP.B #LONG_TO_DN_CONST,D5
0000208A  6700 0042               1546                      BEQ CMP_LONG_TO_DN
0000208E  BA3C 0003               1547                      CMP.B #WORD_TO_AN_CONST,D5
00002092  6700 0046               1548                      BEQ CMP_WORD_TO_AN
00002096  BA3C 0007               1549                      CMP.B #LONG_TO_AN_CONST,D5
0000209A  6700 004A               1550                      BEQ CMP_LONG_TO_AN
0000209E  BA3C 0004               1551                      CMP.B #BYTE_TO_EA_CONST,D5
000020A2  6700 004E               1552                      BEQ EOR_BYTE
000020A6  BA3C 0005               1553                      CMP.B #WORD_TO_EA_CONST,D5
000020AA  6700 004E               1554                      BEQ EOR_WORD
000020AE  BA3C 0006               1555                      CMP.B #LONG_TO_EA_CONST,D5
000020B2  6700 004E               1556                      BEQ EOR_LONG
000020B6  1C3C 0000               1557  CMP_BYTE_TO_DN      MOVE.B #DATA_REGISTER_CONST,D6
000020BA  163C 0000               1558                      MOVE.B #BYTE_CODE,D3
000020BE  6000 004A               1559                      BRA PRINT_CMP_OR_CMPA
000020C2  1C3C 0000               1560  CMP_WORD_TO_DN      MOVE.B #DATA_REGISTER_CONST,D6
000020C6  163C 0001               1561                      MOVE.B #WORD_CODE,D3
000020CA  6000 003E               1562                      BRA PRINT_CMP_OR_CMPA
000020CE  1C3C 0000               1563  CMP_LONG_TO_DN      MOVE.B #DATA_REGISTER_CONST,D6
000020D2  163C 0002               1564                      MOVE.B #LONG_CODE,D3
000020D6  6000 0032               1565                      BRA PRINT_CMP_OR_CMPA
000020DA  1C3C 0001               1566  CMP_WORD_TO_AN      MOVE.B #ADDRESS_REGISTER_CONST,D6
000020DE  163C 0001               1567                      MOVE.B #WORD_CODE,D3
000020E2  6000 0026               1568                      BRA PRINT_CMP_OR_CMPA
000020E6  1C3C 0001               1569  CMP_LONG_TO_AN      MOVE.B #ADDRESS_REGISTER_CONST,D6
000020EA  163C 0002               1570                      MOVE.B #LONG_CODE,D3
000020EE  6000 001A               1571                      BRA PRINT_CMP_OR_CMPA
000020F2  163C 0000               1572  EOR_BYTE            MOVE.B #BYTE_CODE,D3
000020F6  6000 00A4               1573                      BRA EOR
000020FA  163C 0001               1574  EOR_WORD            MOVE.B #WORD_CODE,D3
000020FE  6000 009C               1575                      BRA EOR
00002102  163C 0002               1576  EOR_LONG            MOVE.B #LONG_CODE,D3
00002106  6000 0094               1577                      BRA EOR
0000210A  BC3C 0000               1578  PRINT_CMP_OR_CMPA   CMP.B #DATA_REGISTER_CONST,D6
0000210E  6700 000E               1579                      BEQ PRINT_CMP
00002112                          1580                      *ELSE PRINT CMPA
00002112  43F9 00002C20           1581                      LEA CMPA_TEXT,A1
00002118  4E4F                    1582                      TRAP #15
0000211A  6000 000A               1583                      BRA CMP_PRINT_SIZE
0000211E  43F9 00002C1C           1584  PRINT_CMP           LEA CMP_TEXT,A1
00002124  4E4F                    1585                      TRAP #15
00002126  B63C 0000               1586  CMP_PRINT_SIZE      CMP.B #BYTE_CODE,D3
0000212A  6700 0012               1587                      BEQ CMP_PRINT_BYTE
0000212E  B63C 0001               1588                      CMP.B #WORD_CODE,D3
00002132  6700 0016               1589                      BEQ CMP_PRINT_WORD
00002136  B63C 0002               1590                      CMP.B #LONG_CODE,D3
0000213A  6700 001A               1591                      BEQ CMP_PRINT_LONG
0000213E  43F9 00002BB4           1592  CMP_PRINT_BYTE      LEA BYTE_TEXT,A1
00002144  4E4F                    1593                      TRAP #15
00002146  6000 0016               1594                      BRA CMP_SOURCE
0000214A  43F9 00002BB8           1595  CMP_PRINT_WORD      LEA WORD_TEXT,A1
00002150  4E4F                    1596                      TRAP #15
00002152  6000 000A               1597                      BRA CMP_SOURCE
00002156  43F9 00002BBC           1598  CMP_PRINT_LONG      LEA LONG_TEXT,A1
0000215C  4E4F                    1599                      TRAP #15
0000215E  1207                    1600  CMP_SOURCE          MOVE.B D7,D1 *MOVE DESTINATION REG INTO D1
00002160  4EB9 00002A80           1601                      JSR PRINT_TOKEN
00002166  4EB9 00002912           1602                      JSR PRINT_COMMA                   
0000216C                          1603                      *PRINT SOURCE EA
0000216C  1204                    1604                      MOVE.B D4,D1 *MOVE SOURCE REGISTER TO D1
0000216E  1406                    1605                      MOVE.B D6,D2 *MOVE SOURCE MODE TO D2
00002170  4EB9 00002A80           1606                      JSR PRINT_TOKEN                                      
00002176  4EB9 00002A72           1607                      JSR PRINT_NEXT_LINE
0000217C  4E75                    1608                      RTS
0000217E  4E72 2700               1609                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002182                          1610                      
00002182                          1611  CMP_CHECK_LIT       *VALID IF ADDRESS; CONTINUE
00002182  B23C 0000               1612                      CMP.B #WORD_ADDRESS_CONST,D1
00002186  6700 FEEE               1613                      BEQ CMP_PROCESS
0000218A  B23C 0001               1614                      CMP.B #LONG_ADDRESS_CONST,D1
0000218E  6700 FEE6               1615                      BEQ CMP_PROCESS
00002192                          1616                      *ELSE INVALID; MOVE BITARR POINTER (A2) BACK THE NUMBER OF TIMES WE INCREMENTED IT (3+3+3+3==12) AND GO BACK TO CHECK MORE OPS
00002192  95FC 0000000C           1617  CMP_EOR_INVALID     SUBA.L #12,A2
00002198  6000 F0E4               1618                      BRA CHECK_CMP_EOR_RET
0000219C                          1619  
0000219C                          1620  EOR                 *INVALID IF EA MODE IS AN
0000219C  B43C 0001               1621                      CMP.B #ADDRESS_REGISTER_CONST,D2
000021A0  67F0                    1622                      BEQ CMP_EOR_INVALID
000021A2                          1623                      *PRINT "EOR"
000021A2  43F9 00002C35           1624                      LEA EOR_TEXT,A1
000021A8  4E4F                    1625                      TRAP #15
000021AA                          1626                      *PRINT SIZE BASED ON SIZE CODE IN D3
000021AA  B63C 0000               1627                      CMP.B #BYTE_CODE,D3
000021AE  6700 0022               1628                      BEQ EOR_PRINT_BYTE
000021B2  B63C 0001               1629                      CMP.B #WORD_CODE,D3
000021B6  6700 000E               1630                      BEQ EOR_PRINT_WORD
000021BA                          1631                      *ELSE LONG
000021BA  43F9 00002BBC           1632                      LEA LONG_TEXT,A1
000021C0  4E4F                    1633                      TRAP #15
000021C2  6000 0016               1634                      BRA EOR_OPERANDS
000021C6  43F9 00002BB8           1635  EOR_PRINT_WORD      LEA WORD_TEXT,A1
000021CC  4E4F                    1636                      TRAP #15
000021CE  6000 000A               1637                      BRA EOR_OPERANDS
000021D2  43F9 00002BB4           1638  EOR_PRINT_BYTE      LEA BYTE_TEXT,A1
000021D8  4E4F                    1639                      TRAP #15
000021DA                          1640  EOR_OPERANDS        *PRINT SOURCE EA
000021DA  1204                    1641                      MOVE.B D4,D1 *MOVE DESTINATION REGISTER TO D1
000021DC  1602                    1642                      MOVE.B D2,D3
000021DE  1406                    1643                      MOVE.B D6,D2 *MOVE DESTINATION MODE TO D2
000021E0  4EB9 00002A80           1644                      JSR PRINT_TOKEN
000021E6  4EB9 00002912           1645                      JSR PRINT_COMMA
000021EC                          1646                      *PRINT DESTINATION REGISTER
000021EC  1207                    1647                      MOVE.B D7,D1 *MOVE SOURCE REG INTO D1
000021EE  1403                    1648                      MOVE.B D3,D2
000021F0  4EB9 00002A80           1649                      JSR PRINT_TOKEN
000021F6  4EB9 00002A72           1650                      JSR PRINT_NEXT_LINE
000021FC  4E75                    1651                      RTS
000021FE  4E72 2700               1652                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!                    
00002202                          1653  
00002202                          1654  
00002202                          1655  
00002202                          1656                      
00002202  7200                    1657  CHECK_ASL_ASR_REG   MOVE.L #0,D1 *MAKE SURE D1 IS CLEAN FOR OUTPUT
00002204                          1658                      *READ COUNT/REGITSTER (3 BITS) INTO D1
00002204  1C3C 0003               1659                      MOVE.B #3,D6
00002208  4EB9 000028F2           1660                      JSR BITARR_TO_INT
0000220E  1207                    1661                      MOVE.B D7,D1
00002210                          1662                      *READ DIRECTION BIT (1 BIT) INTO D2
00002210  141A                    1663                      MOVE.B (A2)+,D2
00002212                          1664                      *READ SIZE (2 BITS) INTO D3
00002212  1C3C 0002               1665                      MOVE.B #2,D6
00002216  4EB9 000028F2           1666                      JSR BITARR_TO_INT
0000221C  1607                    1667                      MOVE.B D7,D3
0000221E                          1668                      *INVALID SIZE CODE IF 11; RETURN TO CHECKING OPCODES
0000221E  B63C 0003               1669                      CMP.B #%11,D3
00002222  6700 014A               1670                      BEQ ASX_INVALID_SIZE
00002226                          1671                      *READ IR BIT (1 BIT) INTO D4
00002226  181A                    1672                      MOVE.B (A2)+,D4
00002228                          1673                      *MOVE FINAL BITS TO CHECK (NEXT 2 BITS) INTO D5
00002228  1C3C 0002               1674                      MOVE.B #2,D6
0000222C  4EB9 000028F2           1675                      JSR BITARR_TO_INT
00002232  1A07                    1676                      MOVE.B D7,D5
00002234                          1677                      *THOSE BITS SHOULD BE 00, OR IT ISN'T ASL/ASR
00002234  BA3C 0000               1678                      CMP.B #%00,D5
00002238  6700 001C               1679                      BEQ IS_ASL_OR_ASR
0000223C  BA3C 0001               1680                      CMP.B #%01,D5
00002240  6700 0044               1681                      BEQ IS_LSL_OR_LSR
00002244  BA3C 0003               1682                      CMP.B #%11,D5
00002248  6700 006C               1683                      BEQ IS_ROL_OR_ROR
0000224C                          1684                      *ELSE ROLL BACK A2, AND RETURN
0000224C  95FC 00000009           1685                      SUBA.L #9,A2 *3+1+2+1+2 THAT WE JUST INCREMENTED IT
00002252  6000 F022               1686                      BRA CHECK_ASL_ASR_RET
00002256                          1687  IS_ASL_OR_ASR       *NOW THAT D5 ISN'T BEING USED ANYMORE, PUT DESTINATION REGISTER (3 BITS) THERE
00002256  1C3C 0003               1688                      MOVE.B #3,D6
0000225A  4EB9 000028F2           1689                      JSR BITARR_TO_INT
00002260  1A07                    1690                      MOVE.B D7,D5
00002262  103C 000E               1691                      MOVE.B #14,D0 *PREP FOR OUTPUT
00002266  B43C 0001               1692                      CMP.B #1,D2 *SHIFT LEFT IF DIRECTION BIT IS 1; OTHERWISE SHIFT RIGHT
0000226A  6700 000E               1693                      BEQ ASL_REG
0000226E                          1694                      *ELSE ASR           PRINT "ASR"
0000226E  43F9 00002BD3           1695                      LEA ASR_TEXT,A1
00002274  4E4F                    1696                      TRAP #15
00002276  6000 006E               1697                      BRA ASL_ASR_REG_SIZE
0000227A                          1698  ASL_REG             *PRINT "ASL"
0000227A  43F9 00002BD7           1699                      LEA ASL_TEXT,A1
00002280  4E4F                    1700                      TRAP #15
00002282  6000 0062               1701                      BRA ASL_ASR_REG_SIZE
00002286                          1702  
00002286                          1703                      
00002286                          1704  IS_LSL_OR_LSR       *NOW THAT D5 ISN'T BEING USED ANYMORE, PUT DESTINATION REGISTER (3 BITS) THERE
00002286  1C3C 0003               1705                      MOVE.B #3,D6
0000228A  4EB9 000028F2           1706                      JSR BITARR_TO_INT
00002290  1A07                    1707                      MOVE.B D7,D5
00002292  103C 000E               1708                      MOVE.B #14,D0 *PREP FOR OUTPUT
00002296  B43C 0001               1709                      CMP.B #1,D2 *SHIFT LEFT IF DIRECTION BIT IS 1; OTHERWISE SHIFT RIGHT
0000229A  6700 000E               1710                      BEQ LSL_REG
0000229E                          1711                      *ELSE ASR           PRINT "ASR"
0000229E  43F9 00002C45           1712                      LEA LSR_TEXT,A1
000022A4  4E4F                    1713                      TRAP #15
000022A6  6000 003E               1714                      BRA ASL_ASR_REG_SIZE
000022AA                          1715  LSL_REG             *PRINT "ASL"
000022AA  43F9 00002C41           1716                      LEA LSL_TEXT,A1
000022B0  4E4F                    1717                      TRAP #15 
000022B2  6000 0032               1718                      BRA ASL_ASR_REG_SIZE
000022B6                          1719                     
000022B6                          1720  
000022B6                          1721  IS_ROL_OR_ROR       *NOW THAT D5 ISN'T BEING USED ANYMORE, PUT DESTINATION REGISTER (3 BITS) THERE
000022B6  1C3C 0003               1722                      MOVE.B #3,D6
000022BA  4EB9 000028F2           1723                      JSR BITARR_TO_INT
000022C0  1A07                    1724                      MOVE.B D7,D5
000022C2  103C 000E               1725                      MOVE.B #14,D0 *PREP FOR OUTPUT
000022C6  B43C 0001               1726                      CMP.B #1,D2 *SHIFT LEFT IF DIRECTION BIT IS 1; OTHERWISE SHIFT RIGHT
000022CA  6700 000E               1727                      BEQ ROL_REG
000022CE                          1728                      *ELSE ASR           PRINT "ASR"
000022CE  43F9 00002C6A           1729                      LEA ROR_TEXT,A1
000022D4  4E4F                    1730                      TRAP #15
000022D6  6000 000E               1731                      BRA ASL_ASR_REG_SIZE
000022DA                          1732  ROL_REG             *PRINT "ASL"
000022DA  43F9 00002C6E           1733                      LEA ROL_TEXT,A1
000022E0  4E4F                    1734                      TRAP #15
000022E2  6000 0002               1735                      BRA ASL_ASR_REG_SIZE
000022E6                          1736  
000022E6                          1737                      
000022E6                          1738  ASL_ASR_REG_SIZE    *DETERMINE SIZE, PRINT, AND STORE IN D3
000022E6  B63C 0000               1739                      CMP.B #ASL_ASR_BYTE_CONST,D3
000022EA  6700 001A               1740                      BEQ ASL_ASR_REG_BYTE
000022EE  B63C 0001               1741                      CMP.B #ASL_ASR_WORD_CONST,D3
000022F2  6700 0022               1742                      BEQ ASL_ASR_REG_WORD
000022F6                          1743                      *ELSE LONG
000022F6  43F9 00002BBC           1744                      LEA LONG_TEXT,A1
000022FC  4E4F                    1745                      TRAP #15
000022FE  163C 0002               1746                      MOVE.B #LONG_CODE,D3
00002302  6000 0022               1747                      BRA ASX_REG_OPERANDS
00002306  43F9 00002BB4           1748  ASL_ASR_REG_BYTE    LEA BYTE_TEXT,A1
0000230C  4E4F                    1749                      TRAP #15
0000230E  163C 0000               1750                      MOVE.B #BYTE_CODE,D3
00002312  6000 0012               1751                      BRA ASX_REG_OPERANDS
00002316  43F9 00002BB8           1752  ASL_ASR_REG_WORD    LEA WORD_TEXT,A1
0000231C  4E4F                    1753                      TRAP #15
0000231E  163C 0001               1754                      MOVE.B #WORD_CODE,D3
00002322  6000 0002               1755                      BRA ASX_REG_OPERANDS
00002326                          1756  ASX_REG_OPERANDS    *BEHAVE ACCORDING TO IR BIT
00002326  B83C 0001               1757                      CMP.B #1,D4
0000232A  6700 001C               1758                      BEQ ASX_REG_IR_EQU_ONE
0000232E                          1759                      *PRINT SOURCE REGISTER AS SHIFT COUNT
0000232E                          1760                      *CHANGE TO 8 IF 0
0000232E  B23C 0000               1761                      CMP.B #0,D1
00002332  6700 0034               1762                      BEQ ASX_CHANGE_ZERO
00002336  43F9 00002B9A           1763  ASX_REG_P_SHIFT_C   LEA POUND_TEXT,A1
0000233C  4E4F                    1764                      TRAP #15
0000233E  103C 0003               1765                      MOVE.B #3,D0
00002342  4E4F                    1766                      TRAP #15
00002344  6000 0008               1767                      BRA ASL_ASR_REG_DEST
00002348                          1768  ASX_REG_IR_EQU_ONE  *PRINT SOURCE REGISTER AS A D REGISTER
00002348  4EB9 000029EA           1769                      JSR PRINT_DN
0000234E  4EB9 00002912           1770  ASL_ASR_REG_DEST    JSR PRINT_COMMA
00002354                          1771                      *PRINT DESTINATION REGISTER
00002354  1205                    1772                      MOVE.B D5,D1
00002356  4EB9 000029EA           1773                      JSR PRINT_DN
0000235C  4EB9 00002A72           1774                      JSR PRINT_NEXT_LINE
00002362  4E75                    1775                      RTS
00002364  4E72 2700               1776                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002368                          1777                      
00002368                          1778  ASX_CHANGE_ZERO     *CHANGE SOURCE REGISTER TO 8 INSTEAD OF 0
00002368  123C 0008               1779                      MOVE.B #8,D1
0000236C  60C8                    1780                      BRA ASX_REG_P_SHIFT_C
0000236E                          1781                      
0000236E                          1782  ASX_INVALID_SIZE    *MOVE A2 BACK THE NUMBER OF BITS WE'VE READ (3+1+2==6) AND GO BACK TO CHECK DIFFERENT OPERATIONS.
0000236E  5D8A                    1783                      SUBA.L #6,A2
00002370  6000 EF04               1784                      BRA CHECK_ASL_ASR_RET
00002374                          1785  
00002374                          1786  
00002374                          1787  
00002374                          1788  
00002374                          1789  
00002374                          1790  *NEEDS TESTING
00002374                          1791  CHECK_MOVE          *STORE SIZE BITS (2) IN D3
00002374  1C3C 0002               1792                      MOVE.B #2,D6
00002378  4EB9 000028F2           1793                      JSR BITARR_TO_INT
0000237E  1607                    1794                      MOVE.B D7,D3
00002380                          1795                      *STORE THE DESTINATION REGISTER (3 BITS) IN D4
00002380  1C3C 0003               1796                      MOVE.B #3,D6
00002384  4EB9 000028F2           1797                      JSR BITARR_TO_INT
0000238A  1807                    1798                      MOVE.B D7,D4
0000238C                          1799                      *STORE THE DESTINATION MODE (3 BITS) IN D5
0000238C  1C3C 0003               1800                      MOVE.B #3,D6
00002390  4EB9 000028F2           1801                      JSR BITARR_TO_INT
00002396  1A07                    1802                      MOVE.B D7,D5
00002398                          1803                      *STORE THE SOURCE MODE (3 BITS) IN D2
00002398  1C3C 0003               1804                      MOVE.B #3,D6
0000239C  4EB9 000028F2           1805                      JSR BITARR_TO_INT
000023A2  1407                    1806                      MOVE.B D7,D2
000023A4                          1807                      *STORE THE SOURCE REGISTER (3 BITS) IN D1
000023A4  1C3C 0003               1808                      MOVE.B #3,D6
000023A8  4EB9 000028F2           1809                      JSR BITARR_TO_INT
000023AE  1207                    1810                      MOVE.B D7,D1
000023B0                          1811                      
000023B0                          1812                      *CHECK EA MODE VALIDITY
000023B0                          1813                      *IF LITERAL DEST, CHECK DEST REGISTER
000023B0  BA3C 0007               1814                      CMP.B #LITERAL_CONST,D5
000023B4  6700 0098               1815                      BEQ MOVE_DEST_REG
000023B8                          1816                      *IF LITERAL SOURCE, CHECK SOURCE REGISTER
000023B8  B43C 0007               1817  MOVE_SOURCE_LIT     CMP.B #LITERAL_CONST,D2
000023BC  6700 00AC               1818                      BEQ MOVE_SOURCE_REG
000023C0                          1819                      *UNSUPPORTED IF SOURCE OR DEST IS DISPLACEMENT
000023C0  B43C 0005               1820                      CMP.B #D16_AN_CONST,D2
000023C4  6700 EF18               1821                      BEQ UNSUPPORTED_OP
000023C8  B43C 0006               1822                      CMP.B #D8_AN_XN_CONST,D2
000023CC  6700 EF10               1823                      BEQ UNSUPPORTED_OP
000023D0                          1824                      *ELSE VALID; CONTINUE
000023D0                          1825                      
000023D0  103C 000E               1826  MOVE_OUTPUT         MOVE.B #14,D0 *PREP FOR OUTPUT
000023D4                          1827                      *DETERMINE WHETHER MOVE OR MOVEA
000023D4  B83C 0001               1828                      CMP.B #ADDRESS_REGISTER_CONST,D4
000023D8  6700 000E               1829                      BEQ MOVEA
000023DC                          1830                      *PRINT "MOVE"
000023DC  43F9 00002C49           1831                      LEA MOVE_TEXT,A1
000023E2  4E4F                    1832                      TRAP #15
000023E4  6000 000A               1833                      BRA MOVE_SIZE
000023E8                          1834  MOVEA               *PRINT "MOVEA"
000023E8  43F9 00002C4E           1835                      LEA MOVEA_TEXT,A1
000023EE  4E4F                    1836                      TRAP #15
000023F0                          1837  MOVE_SIZE           *DETERMINE SIZE IN ORDER TO PRINT IT AND STORE SIZE CODE IN D3
000023F0  B63C 0001               1838                      CMP.B #MOVE_BYTE_CONST,D3
000023F4  6700 002A               1839                      BEQ MOVE_BYTE
000023F8  B63C 0003               1840                      CMP.B #MOVE_WORD_CONST,D3
000023FC  6700 0012               1841                      BEQ MOVE_WORD
00002400                          1842                      *ELSE LONG
00002400  163C 0002               1843                      MOVE.B #LONG_CODE,D3
00002404                          1844                      *PRINT ".L "
00002404  43F9 00002BBC           1845                      LEA LONG_TEXT,A1
0000240A  4E4F                    1846                      TRAP #15
0000240C  6000 001E               1847                      BRA MOVE_SOURCE
00002410  163C 0001               1848  MOVE_WORD           MOVE.B #WORD_CODE,D3
00002414                          1849                      *PRINT ".W "
00002414  43F9 00002BB8           1850                      LEA WORD_TEXT,A1
0000241A  4E4F                    1851                      TRAP #15
0000241C  6000 000E               1852                      BRA MOVE_SOURCE
00002420  163C 0000               1853  MOVE_BYTE           MOVE.B #BYTE_CODE,D3
00002424                          1854                      *PRINT ".B "
00002424  43F9 00002BB4           1855                      LEA BYTE_TEXT,A1
0000242A  4E4F                    1856                      TRAP #15
0000242C                          1857  MOVE_SOURCE         *PRINT SOURCE TOKEN
0000242C  4EB9 00002A80           1858                      JSR PRINT_TOKEN
00002432  4EB9 00002912           1859                      JSR PRINT_COMMA
00002438                          1860                      *PRINT DESTINATION TOKEN
00002438  2204                    1861                      MOVE.L D4,D1
0000243A  1405                    1862                      MOVE.B D5,D2
0000243C  4EB9 00002A80           1863                      JSR PRINT_TOKEN
00002442  4EB9 00002A72           1864                      JSR PRINT_NEXT_LINE
00002448  4E75                    1865                      RTS
0000244A  4E72 2700               1866                      STOP #EXIT *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
0000244E                          1867                      
0000244E                          1868  MOVE_DEST_REG       *INVALID IF IMMEDIATE, VALID IF MEMORY, OTHERWISE UNSUPPORTED                    
0000244E  B83C 0004               1869                      CMP.B #IMMEDIATE_CONST,D4
00002452  6700 0032               1870                      BEQ MOVE_INVALID
00002456  B83C 0000               1871                      CMP.B #WORD_ADDRESS_CONST,D4
0000245A  6700 FF5C               1872                      BEQ MOVE_SOURCE_LIT
0000245E  B83C 0001               1873                      CMP.B #LONG_ADDRESS_CONST,D4
00002462  6700 FF54               1874                      BEQ MOVE_SOURCE_LIT
00002466  6000 EE76               1875                      BRA UNSUPPORTED_OP
0000246A                          1876  MOVE_SOURCE_REG     *VALID IF IMMEDIATE OR MEMORY, OTHERWISE UNSUPPORTED
0000246A  B23C 0004               1877                      CMP.B #IMMEDIATE_CONST,D1
0000246E  6700 FF60               1878                      BEQ MOVE_OUTPUT
00002472  B23C 0000               1879                      CMP.B #WORD_ADDRESS_CONST,D1
00002476  6700 FF58               1880                      BEQ MOVE_OUTPUT
0000247A  B23C 0001               1881                      CMP.B #LONG_ADDRESS_CONST,D1
0000247E  6700 FF50               1882                      BEQ MOVE_OUTPUT
00002482  6000 EE5A               1883                      BRA UNSUPPORTED_OP
00002486                          1884  MOVE_INVALID        *MOVE BITARR POINTER BACK NUMBER OF SPACES FORWARD WE'VE MOVED IT (2+3+3+3+3==14) AND RETURN TO CHECK 
00002486                          1885                      *MORE OPERATIONS
00002486  95FC 0000000E           1886                      SUBA.L #14,A2
0000248C  6000 EE38               1887                      BRA CHECK_MOVE_RET
00002490                          1888  
00002490                          1889  
00002490                          1890  
00002490                          1891  
00002490  7000                    1892  CHECK_MULS_WORD_CONST   MOVE.L #0,D0    *CLEAR REGISTERS
00002492  7200                    1893                          MOVE.L #0,D1
00002494  1C3C 0003               1894                          MOVE.B #3,D6        *STORE REGISTER BIT(3) IN D4
00002498  4EB9 000028F2           1895                          JSR BITARR_TO_INT
0000249E  1807                    1896                          MOVE.B D7,D4        *STORE NEXT 3 BITS IN D3
000024A0  1C3C 0003               1897                          MOVE.B #3,D6
000024A4  4EB9 000028F2           1898                          JSR BITARR_TO_INT    
000024AA  1607                    1899                          MOVE.B D7,D3
000024AC  1C3C 0003               1900                          MOVE.B #3, D6       *STORE MODE IN D6
000024B0  4EB9 000028F2           1901                          JSR BITARR_TO_INT
000024B6  1407                    1902                          MOVE.B D7,D2
000024B8  1C3C 0003               1903                          MOVE.B #3,D6        *STORE REGISTER IN D1
000024BC  4EB9 000028F2           1904                          JSR BITARR_TO_INT
000024C2  1207                    1905                          MOVE.B D7,D1
000024C4  43F9 00002C5A           1906                          LEA MULS_TEXT,A1    *PRINT MULS
000024CA  103C 000E               1907                          MOVE.B #14,D0
000024CE  4E4F                    1908                          TRAP #15
000024D0  43F9 00002BB2           1909                          LEA SPACE_TEXT,A1
000024D6  103C 000E               1910                          MOVE.B #14,D0
000024DA  4E4F                    1911                          TRAP #15
000024DC  4EB9 00002A80           1912                          JSR PRINT_TOKEN     *PRINT SOURCE
000024E2  43F9 00002B9E           1913                          LEA COMMA_TEXT,A1
000024E8  103C 000E               1914                          MOVE.B #14,D0
000024EC  4E4F                    1915                          TRAP #15
000024EE  1204                    1916                          MOVE.B D4,D1        *PRINT DEST. REGISTER
000024F0  4EB9 000029EA           1917                          JSR PRINT_DN
000024F6  4EB9 00002A72           1918                          JSR PRINT_NEXT_LINE
000024FC  4E75                    1919                          RTS
000024FE  4E72 2700               1920                          STOP #EXIT  *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002502                          1921                          
00002502  7000                    1922  CHECK_BCLR_DYNAMIC      MOVE.L #0,D0    *CLEAR REGISTERS
00002504  7200                    1923                          MOVE.L #0,D1
00002506  1C3C 0003               1924                          MOVE.B #3,D6        *STORE REGISTER BIT(3) IN D4
0000250A  4EB9 000028F2           1925                          JSR BITARR_TO_INT
00002510  1807                    1926                          MOVE.B D7,D4        *STORE NEXT 3 BITS IN D3
00002512  1C3C 0003               1927                          MOVE.B #3,D6
00002516  4EB9 000028F2           1928                          JSR BITARR_TO_INT    
0000251C  1607                    1929                          MOVE.B D7,D3
0000251E  1C3C 0003               1930                          MOVE.B #3, D6       *STORE MODE IN D6
00002522  4EB9 000028F2           1931                          JSR BITARR_TO_INT
00002528  1407                    1932                          MOVE.B D7,D2
0000252A  1C3C 0003               1933                          MOVE.B #3,D6        *STORE REGISTER IN D1
0000252E  4EB9 000028F2           1934                          JSR BITARR_TO_INT
00002534  1207                    1935                          MOVE.B D7,D1
00002536  43F9 00002C17           1936                          LEA BCLR_TEXT,A1    *PRINT BCLR
0000253C  103C 000E               1937                          MOVE.B #14,D0
00002540  4E4F                    1938                          TRAP #15
00002542  43F9 00002BB2           1939                          LEA SPACE_TEXT,A1
00002548  103C 000E               1940                          MOVE.B #14,D0
0000254C  4E4F                    1941                          TRAP #15
0000254E  1204                    1942                          MOVE.B D4,D1        *PRINT SOURCE REGISTER
00002550  4EB9 000029EA           1943                          JSR PRINT_DN
00002556  43F9 00002B9E           1944                          LEA COMMA_TEXT,A1
0000255C  103C 000E               1945                          MOVE.B #14,D0
00002560  4E4F                    1946                          TRAP #15
00002562  4EB9 00002A80           1947                          JSR PRINT_TOKEN     *PRINT DESTINATION
00002568  4EB9 00002A72           1948                          JSR PRINT_NEXT_LINE
0000256E  4E75                    1949                          RTS
00002570  4E72 2700               1950                          STOP #EXIT  *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002574                          1951                          
00002574                          1952  
00002574                          1953     
00002574  7000                    1954  CHECK_DIVS_OR_CONST     MOVE.L #0,D0         *CLEAR REGISTERS
00002576  7200                    1955                          MOVE.L #0,D1
00002578  1C3C 0003               1956                          MOVE.B #3,D6        *STORE REGISTER BIT(3) IN D4
0000257C  4EB9 000028F2           1957                          JSR BITARR_TO_INT
00002582  1807                    1958                          MOVE.B D7,D4        *STORE OPMODE 3 BITS IN D3
00002584  1C3C 0003               1959                          MOVE.B #3,D6
00002588  4EB9 000028F2           1960                          JSR BITARR_TO_INT    
0000258E  1607                    1961                          MOVE.B D7,D3
00002590  B63C 0007               1962                          CMP.B #7,D3
00002594  6700 0006               1963                          BEQ DIVS_BRANCH
00002598  6000 0058               1964                          BRA OR_BRANCH
0000259C                          1965  
0000259C                          1966                          *PROCESS DIVS
0000259C  1C3C 0003               1967  DIVS_BRANCH             MOVE.B #3, D6       *STORE MODE IN D6
000025A0  4EB9 000028F2           1968                          JSR BITARR_TO_INT
000025A6  1407                    1969                          MOVE.B D7,D2
000025A8  1C3C 0003               1970                          MOVE.B #3,D6        *STORE <EA> REGISTER IN D1
000025AC  4EB9 000028F2           1971                          JSR BITARR_TO_INT
000025B2  1207                    1972                          MOVE.B D7,D1
000025B4  43F9 00002C30           1973                          LEA DIVS_TEXT,A1    *PRINT DIVS
000025BA  103C 000E               1974                          MOVE.B #14,D0
000025BE  4E4F                    1975                          TRAP #15
000025C0  43F9 00002BB2           1976                          LEA SPACE_TEXT,A1
000025C6  103C 000E               1977                          MOVE.B #14,D0
000025CA  4E4F                    1978                          TRAP #15
000025CC  4EB9 00002A80           1979                          JSR PRINT_TOKEN     *PRINT SOURCE
000025D2  43F9 00002B9E           1980                          LEA COMMA_TEXT,A1
000025D8  103C 000E               1981                          MOVE.B #14,D0
000025DC  4E4F                    1982                          TRAP #15
000025DE  1204                    1983                          MOVE.B D4,D1        *PRINT DEST. REGISTER
000025E0  4EB9 000029EA           1984                          JSR PRINT_DN
000025E6  4EB9 00002A72           1985                          JSR PRINT_NEXT_LINE
000025EC  4E75                    1986                          RTS
000025EE  4E72 2700               1987                          STOP #EXIT  *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
000025F2                          1988                          
000025F2  B63C 0002               1989  OR_BRANCH               CMP.B #2,D3           *FIGURE OUT WHICH BRANCH TO GO TO, OPMODE IN D3
000025F6  6F00 0006               1990                          BLE OR_EA_DN
000025FA  6000 0098               1991                          BRA OR_DN_EA
000025FE  1C3C 0003               1992  OR_EA_DN                MOVE.B #3,D6        *STORE EA MODE IN D2
00002602  4EB9 000028F2           1993                          JSR BITARR_TO_INT
00002608  1407                    1994                          MOVE.B D7,D2 
0000260A  1C3C 0003               1995                          MOVE.B #3,D6        *STORE EA REGISTER IN D1
0000260E  4EB9 000028F2           1996                          JSR BITARR_TO_INT
00002614  1207                    1997                          MOVE.B D7,D1
00002616  43F9 00002C63           1998                          LEA OR_TEXT,A1      *PRINT 'OR'
0000261C  103C 000E               1999                          MOVE.B #14,D0
00002620  4E4F                    2000                          TRAP #15
00002622  B63C 0000               2001                          CMP.B #0,D3
00002626  6700 000E               2002                          BEQ OR_BYTE1             *FIGURE OUT SIZE
0000262A  B63C 0001               2003                          CMP.B #1,D3
0000262E  6700 0016               2004                          BEQ OR_WORD1
00002632  6000 0022               2005                          BRA OR_LONG1
00002636  43F9 00002BB4           2006  OR_BYTE1                LEA BYTE_TEXT,A1        *PRINT SIZE CODE
0000263C  103C 000E               2007                          MOVE.B #14,D0
00002640  4E4F                    2008                          TRAP #15
00002642  6000 0022               2009                          BRA OR_EA_DN_CONT
00002646  43F9 00002BB8           2010  OR_WORD1                LEA WORD_TEXT,A1
0000264C  103C 000E               2011                          MOVE.B #14,D0
00002650  4E4F                    2012                          TRAP #15
00002652  6000 0012               2013                          BRA OR_EA_DN_CONT
00002656  43F9 00002BBC           2014  OR_LONG1                LEA LONG_TEXT,A1
0000265C  103C 000E               2015                          MOVE.B #14,D0
00002660  4E4F                    2016                          TRAP #15
00002662  6000 0002               2017                          BRA OR_EA_DN_CONT
00002666  43F9 00002BB2           2018  OR_EA_DN_CONT           LEA SPACE_TEXT,A1
0000266C  4E4F                    2019                          TRAP #15
0000266E  4EB9 00002A80           2020                          JSR PRINT_TOKEN                       
00002674  43F9 00002B9E           2021                          LEA COMMA_TEXT,A1
0000267A  103C 000E               2022                          MOVE.B #14,D0
0000267E  4E4F                    2023                          TRAP #15                        
00002680  1204                    2024                          MOVE.B D4,D1
00002682  4EB9 000029EA           2025                          JSR PRINT_DN                       
00002688  4EB9 00002A72           2026                          JSR PRINT_NEXT_LINE
0000268E  4E75                    2027                          RTS
00002690  4E72 2700               2028                          STOP #EXIT    *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002694                          2029                          
00002694  1C3C 0003               2030  OR_DN_EA                MOVE.B #3,D6        *STORE EA MODE IN D2
00002698  4EB9 000028F2           2031                          JSR BITARR_TO_INT
0000269E  1407                    2032                          MOVE.B D7,D2 
000026A0  1C3C 0003               2033                          MOVE.B #3,D6        *STORE EA REGISTER IN D1
000026A4  4EB9 000028F2           2034                          JSR BITARR_TO_INT
000026AA  1207                    2035                          MOVE.B D7,D1
000026AC  43F9 00002C63           2036                          LEA OR_TEXT,A1
000026B2  103C 000E               2037                          MOVE.B #14,D0           *PRINT OR
000026B6  4E4F                    2038                          TRAP #15
000026B8  B63C 0004               2039                          CMP.B #4,D3
000026BC  6700 000E               2040                          BEQ OR_BYTE             *FIGURE OUT SIZE
000026C0  B63C 0005               2041                          CMP.B #5,D3
000026C4  6700 0016               2042                          BEQ OR_WORD
000026C8  6000 0022               2043                          BRA OR_LONG
000026CC  43F9 00002BB4           2044  OR_BYTE                 LEA BYTE_TEXT,A1
000026D2  103C 000E               2045                          MOVE.B #14,D0
000026D6  4E4F                    2046                          TRAP #15
000026D8  6000 0022               2047                          BRA OR_DN_EA_CONT
000026DC  43F9 00002BB8           2048  OR_WORD                 LEA WORD_TEXT,A1
000026E2  103C 000E               2049                          MOVE.B #14,D0
000026E6  4E4F                    2050                          TRAP #15
000026E8  6000 0012               2051                          BRA OR_DN_EA_CONT
000026EC  43F9 00002BBC           2052  OR_LONG                 LEA LONG_TEXT,A1
000026F2  103C 000E               2053                          MOVE.B #14,D0
000026F6  4E4F                    2054                          TRAP #15
000026F8  6000 0002               2055                          BRA OR_DN_EA_CONT
000026FC  43F9 00002BB2           2056  OR_DN_EA_CONT           LEA SPACE_TEXT,A1
00002702  4E4F                    2057                          TRAP #15                       
00002704  4EB9 000029EA           2058                          JSR PRINT_DN
0000270A  43F9 00002B9E           2059                          LEA COMMA_TEXT,A1
00002710  103C 000E               2060                          MOVE.B #14,D0
00002714  4E4F                    2061                          TRAP #15                        
00002716  1204                    2062                          MOVE.B D4,D1
00002718  4EB9 00002A80           2063                          JSR PRINT_TOKEN                        
0000271E  4EB9 00002A72           2064                          JSR PRINT_NEXT_LINE
00002724  4E75                    2065                          RTS
00002726  4E72 2700               2066                          STOP #EXIT    *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!                         
0000272A                          2067                          
0000272A                          2068                  
0000272A  7000                    2069  CHECK_LEA_CONST         MOVE.L #0,D0         *CLEAR REGISTERS
0000272C  7200                    2070                          MOVE.L #0,D1
0000272E  1C3C 0003               2071                          MOVE.B #3,D6        *STORE REGISTER BIT(3) IN D4
00002732  4EB9 000028F2           2072                          JSR BITARR_TO_INT
00002738  1807                    2073                          MOVE.B D7,D4        *STORE OPMODE 3 BITS IN D3
0000273A  1C3C 0003               2074                          MOVE.B #3,D6
0000273E  4EB9 000028F2           2075                          JSR BITARR_TO_INT    
00002744  1607                    2076                          MOVE.B D7,D3
00002746  1C3C 0003               2077                          MOVE.B #3, D6       *STORE MODE IN D6
0000274A  4EB9 000028F2           2078                          JSR BITARR_TO_INT
00002750  1407                    2079                          MOVE.B D7,D2
00002752  1C3C 0003               2080                          MOVE.B #3,D6        *STORE <EA> REGISTER IN D1
00002756  4EB9 000028F2           2081                          JSR BITARR_TO_INT
0000275C  1207                    2082                          MOVE.B D7,D1
0000275E  43F9 00002C3D           2083                          LEA LEA_TEXT,A1    *PRINT LEA
00002764  103C 000E               2084                          MOVE.B #14,D0
00002768  4E4F                    2085                          TRAP #15
0000276A  43F9 00002BB2           2086                          LEA SPACE_TEXT,A1
00002770  103C 000E               2087                          MOVE.B #14,D0
00002774  4E4F                    2088                          TRAP #15
00002776  4EB9 00002A80           2089                          JSR PRINT_TOKEN     *PRINT SOURCE
0000277C  43F9 00002B9E           2090                          LEA COMMA_TEXT,A1
00002782  103C 000E               2091                          MOVE.B #14,D0
00002786  4E4F                    2092                          TRAP #15
00002788  1204                    2093                          MOVE.B D4,D1        *PRINT DEST. REGISTER
0000278A  4EB9 000029FE           2094                          JSR PRINT_AN
00002790  4EB9 00002A72           2095                          JSR PRINT_NEXT_LINE
00002796  4E75                    2096                          RTS
00002798  4E72 2700               2097                          STOP #EXIT  *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
0000279C                          2098  
0000279C  7000                    2099  CHECK_SUBQ_CONST        MOVE.L #0,D0         *CLEAR REGISTERS
0000279E  7200                    2100                          MOVE.L #0,D1
000027A0  1C3C 0003               2101                          MOVE.B #3,D6        *STORE DATA BITS(3) IN D1
000027A4  4EB9 000028F2           2102                          JSR BITARR_TO_INT
000027AA  1207                    2103                          MOVE.B D7,D1
000027AC  B27C 0000               2104                          CMP #0,D1
000027B0  6700 0006               2105                          BEQ SUBQ_PRINT_8                        
000027B4  6000 0006               2106                          BRA SUBQ_PROC_CONT
000027B8  123C 0008               2107  SUBQ_PRINT_8            MOVE.B #8,D1
000027BC  43F9 00002C84           2108  SUBQ_PROC_CONT          LEA SUBQ_TEXT,A1    *PRINT SUBQ
000027C2  103C 000E               2109                          MOVE.B #14,D0
000027C6  4E4F                    2110                          TRAP #15
000027C8  1C3C 0001               2111                          MOVE.B #1,D6
000027CC  4EB9 000028F2           2112                          JSR BITARR_TO_INT   *GET RID OF THE STUPID BIT
000027D2  1C3C 0002               2113                          MOVE.B #2,D6        *GET SIZE BITS (2 BITS) STORES IN D3
000027D6  4EB9 000028F2           2114                          JSR BITARR_TO_INT
000027DC  1607                    2115                          MOVE.B D7,D3
000027DE  B63C 0000               2116                          CMP.B #0,D3         *PRINT SIZE CODE
000027E2  6700 000E               2117                          BEQ SUBQ_BYTE
000027E6  B63C 0001               2118                          CMP.B #1,D3
000027EA  6700 0012               2119                          BEQ SUBQ_WORD
000027EE  6000 001A               2120                          BRA SUBQ_LONG
000027F2  43F9 00002BB4           2121  SUBQ_BYTE               LEA BYTE_TEXT,A1    
000027F8  4E4F                    2122                          TRAP #15
000027FA  6000 0016               2123                          BRA SUBQ_CONT
000027FE  43F9 00002BB8           2124  SUBQ_WORD               LEA WORD_TEXT,A1
00002804  4E4F                    2125                          TRAP #15
00002806  6000 000A               2126                          BRA SUBQ_CONT
0000280A  43F9 00002BBC           2127  SUBQ_LONG               LEA LONG_TEXT,A1
00002810  4E4F                    2128                          TRAP #15                    
00002812  43F9 00002B9A           2129  SUBQ_CONT               LEA POUND_TEXT,A1
00002818  4E4F                    2130                          TRAP #15
0000281A  103C 0003               2131                          MOVE.B #3,D0
0000281E  4E4F                    2132                          TRAP #15
00002820  1C3C 0003               2133                          MOVE.B #3,D6        *GET <EA> MODE BITS(3BITS) STORE IN D2
00002824  4EB9 000028F2           2134                          JSR BITARR_TO_INT
0000282A  1407                    2135                          MOVE.B D7,D2
0000282C  1C3C 0003               2136                          MOVE.B #3, D6       *GET REGISTER BITS (3BITS) STORE IN D1
00002830  4EB9 000028F2           2137                          JSR BITARR_TO_INT
00002836  1207                    2138                          MOVE.B D7,D1
00002838  43F9 00002B9E           2139                          LEA COMMA_TEXT,A1
0000283E  103C 000E               2140                          MOVE.B #14,D0
00002842  4E4F                    2141                          TRAP #15
00002844  4EB9 00002A80           2142                          JSR PRINT_TOKEN
0000284A  4EB9 00002A72           2143                          JSR PRINT_NEXT_LINE
00002850  4E75                    2144                          RTS
00002852  4E72 2700               2145                          STOP #EXIT  *!!!!!CHANGE THIS ONCE THERE'S SOMEWHERE TO GO AFTER DECODING AN OPCODE!!!!!
00002856                          2146  
00002856                          2147                          
00002856                          2148                          
00002856                          2149                         
00002856                          2150  
00002856                          2151  
00002856                          2152  
00002856                          2153  *****************************MOVEM REGISTER LIST PROC CODE***********************************************
00002856                          2154  PRINT_MOVEM_DREGS   *READS THE BIT MASK FOR THE MOVEM COMMAND AND PRINTS THE DATA REGISTERS IN THE SYNTAX
00002856                          2155                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST THE END OF SOURCE CODE
00002856                          2156                      *GETS WORD TO READ FROM (A6) AND INCREMENTS
00002856  381E                    2157                      MOVE.W (A6)+,D4     *GRAB THE BITMASK AND STORE IN D4
00002858  1C3C 0000               2158                      MOVE.B #0, D6       *SET UP COUNTER FOR LOOP IN D6
0000285C  1A3C 0000               2159                      MOVE.B #0, D5       *USED TO DETERMINE WHETHER TO PRINT /. PRINT IF GREATER THAN 0
00002860  BC3C 0008               2160  MOVEM_DREGS_LOOP    CMP.B #8, D6       
00002864  6700 0040               2161                      BEQ MOVEM_DREGS_EXIT        *EXIT LOOP WHEN DONE WITH 8 BITS                    
00002868  E244                    2162                      ASR #1,D4                   *SHIFT BITS RIGHT AND CHECK THE CARRY
0000286A  55C7                    2163                      SCS D7                      *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
0000286C  8EFC 00FF               2164                      DIVU.W #$FF,D7              *CONVERT TO A ONE
00002870  BE3C 0001               2165                      CMP.B #1,D7
00002874  6700 0006               2166                      BEQ PRINT_DREGISTER          *IF A ONE WAS FOUND, PRINT IT OUT
00002878  6000 0028               2167                      BRA MOVEM_DLOOP_CONT        *OTHERWISE GO BACK TO START OF LOOP
0000287C  103C 000E               2168  PRINT_DREGISTER     MOVE.B #14,D0               *PREPARE FOR OUTPUT       
00002880  BA3C 0000               2169                      CMP.B #0, D5                *CHECK IF A SLASH NEEDS TO BE PRINTED
00002884  6700 000A               2170                      BEQ DONT_PRINT_SLASH        
00002888  43F9 00002BB0           2171                      LEA SLASH_TEXT,A1           *PRINT SLASH IF NECESSARY
0000288E  4E4F                    2172                      TRAP #15    
00002890  43F9 00002BA0           2173  DONT_PRINT_SLASH    LEA D_TEXT,A1               *PRINT 'D' FOR DATA REGISTER
00002896  4E4F                    2174                      TRAP #15
00002898  1206                    2175                      MOVE.B D6,D1                *MOVE THE CURRENT COUNTER TO PRINT
0000289A  103C 0003               2176                      MOVE.B #3,D0                *PRINT COUNTER, COUNTER WILL BE THE CORRECT REGISTER NUMBER FOR CURRENT BIT
0000289E  4E4F                    2177                      TRAP #15
000028A0  5205                    2178                      ADD.B #1,D5                 *INCREMENT SLASH COUNTER                                              
000028A2  5206                    2179  MOVEM_DLOOP_CONT    ADD.B #1,D6                 *INCREMENT LOOP COUNTER
000028A4  60BA                    2180                      BRA MOVEM_DREGS_LOOP
000028A6                          2181  
000028A6                          2182                                  *NOW PRINT THE ADDRESS REGISTERS
000028A6  1C3C 0000               2183  MOVEM_DREGS_EXIT    MOVE.B #0, D6               *SET UP COUNTER FOR LOOP IN D6
000028AA  BC3C 0008               2184  MOVEM_AREGS_LOOP    CMP.B #8, D6                *LOOP 8 TIMES TO GO THROUGH THE 8 REMAINING BITS IN BITMASK            
000028AE  6700 0040               2185                      BEQ MOVEM_AREGS_EXIT     *EXIT LOOP WHEN DONE WITH WORD                    
000028B2  E244                    2186                      ASR #1,D4                   *SHIFT BITS RIGHT AND CHECK THE CARRY
000028B4  55C7                    2187                      SCS D7                      *PUT $FF IN D2 IF WE SHIFTED OUT A 1; OTHERWISE LEAVE IT AS 0
000028B6  8EFC 00FF               2188                      DIVU.W #$FF,D7              *CONVERT TO A ONE
000028BA  BE3C 0001               2189                      CMP.B #1,D7
000028BE  6700 0006               2190                      BEQ PRINT_AREGISTER          *IF A ONE WAS FOUND, PRINT IT OUT
000028C2  6000 0028               2191                      BRA MOVEM_ALOOP_CONT         *OTHERWISE GO BACK TO START OF LOOP
000028C6  103C 000E               2192  PRINT_AREGISTER     MOVE.B #14,D0               *PREPARE FOR OUTPUT       
000028CA  BA3C 0000               2193                      CMP.B #0, D5                *CHECK IF A SLASH NEEDS TO BE PRINTED
000028CE  6700 000A               2194                      BEQ DONT_PRINT_SLASHA        
000028D2  43F9 00002BB0           2195                      LEA SLASH_TEXT,A1           *PRINT SLASH IF NECESSARY
000028D8  4E4F                    2196                      TRAP #15    
000028DA  43F9 00002BA2           2197  DONT_PRINT_SLASHA   LEA A_TEXT,A1               *PRINT 'A' FOR ADDRESS REGISTER
000028E0  4E4F                    2198                      TRAP #15
000028E2  1206                    2199                      MOVE.B D6,D1                *MOVE THE CURRENT COUNTER TO PRINT
000028E4  103C 0003               2200                      MOVE.B #3,D0                *PRINT COUNTER, COUNTER WILL BE THE CORRECT REGISTER NUMBER FOR CURRENT BIT
000028E8  4E4F                    2201                      TRAP #15
000028EA  5205                    2202                      ADD.B #1,D5                 *INCREMENT SLASH COUNTER
000028EC  5206                    2203  MOVEM_ALOOP_CONT    ADD.B #1,D6                 *INCREMENT LOOP COUNTER
000028EE  60BA                    2204                      BRA MOVEM_AREGS_LOOP               
000028F0  4E75                    2205  MOVEM_AREGS_EXIT    RTS
000028F2                          2206  
000028F2                          2207  ****************************************************************************************************
000028F2                          2208                 
000028F2                          2209                      *DETERMINE THE X-BIT NUMBER Y FROM THE NEXT X BITS STORED IN BYTES AT (A2)
000028F2                          2210                      *CALLER'S RESPONSIBILITY TO NOT RUN PAST END OF ARRAY
000028F2                          2211                      *INCREMENTS A2 BY X
000028F2                          2212                      *USES D6.B. VALUE WILL BE 0 WHEN THIS RETURNS.
000028F2                          2213                      *X SHOULD BE STORED IN D6.B
000028F2                          2214                      *Y WILL BE STORED IN D7.B
000028F2                          2215                      *X SHOULD NEVER BE 0 OR NEGATIVE. UNDEFINED BEHAVIOR IF X<=0. SERIOUSLY, JUST DON'T DO IT.
000028F2                          2216                      
000028F2  2F05                    2217  BITARR_TO_INT       MOVE.L D5,-(SP)
000028F4  4287                    2218                      CLR.L D7
000028F6  1E1A                    2219                      MOVE.B (A2)+,D7 *MOVE THE FIRST BIT INTO D7
000028F8  5306                    2220                      SUBQ.B #1,D6 *WE'VE ALREADY MOVED IN ONE BIT, SO DECREMENT X (USING IT AS LOOP CONTROL VARIABLE).
000028FA  BC3C 0000               2221  BATI_LOOP           CMP.B #0,D6
000028FE  6700 000E               2222                      BEQ BATI_CLEANUP
00002902  4285                    2223                      CLR.L D5
00002904  E34F                    2224                      LSL.W #1,D7 *BITSHIFT THE BITS WE'VE GOT SO FAR 1 TO THE LEFT
00002906  DA1A                    2225                      ADD.B (A2)+,D5 *ADD IN THE NEXT BIT AT THE 0-BIT, USE D5 TO RETAIN ARRAY INTEGRITY WHEN ADDING AS A WORD
00002908  DE45                    2226                      ADD.W D5,D7        
0000290A  5306                    2227                      SUBQ.B #1,D6 *DECREMENT X BECAUSE WE GOT ONE MORE BIT.
0000290C  60EC                    2228                      BRA BATI_LOOP
0000290E                          2229                      
0000290E  2A1F                    2230  BATI_CLEANUP        MOVE.L (SP)+,D5
00002910  4E75                    2231                      RTS
00002912                          2232  
00002912                          2233                      *PRINT A COMMA (",")
00002912                          2234                      *USES D0.B. VALUE WILL BE 14 WHEN THIS RETURNS.
00002912                          2235                      *USES A1.L. WILL POINT TO "," WHEN THIS RETURNS.
00002912  43F9 00002B9E           2236  PRINT_COMMA         LEA COMMA_TEXT,A1
00002918  103C 000E               2237                      MOVE.B #14,D0
0000291C  4E4F                    2238                      TRAP #15
0000291E  4E75                    2239                      RTS
00002920                          2240  
00002920                          2241                      
00002920                          2242                      *PRINT THE NUMBER STORED IN D1.L IN HEX
00002920                          2243                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
00002920                          2244                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
00002920                          2245                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
00002920                          2246  PRINT_HEX           *STORE D2 AND D3, BECAUSE OTHER SUBROUTINES DON'T CHANGE THEM, AND FOR BACKWARDS COMPATIBILITY WITH CODE
00002920                          2247                      *WRITTEN BEFORE NUMBER OUTPUT USED THEM.
00002920  48E7 3000               2248                      MOVEM.L D2/D3,-(SP)
00002924                          2249                      *MOVE THE VALUE TO D2; WE ACTUALLY WANT IT IN A REGISTER OTHER THAN D1.
00002924  2401                    2250                      MOVE.L D1,D2
00002926                          2251                      *CLEAR OUT D1 BEFORE USE, SINCE WE'LL STORE A BYTE IN IT AND NEED EVERYTHING BEFORE TO BE 0.
00002926  7200                    2252                      MOVE.L #0,D1
00002928                          2253                      *INITIALIZE D3 (COUNTER FOR NUMBER OF NUMBER OF NIBBLES WE'VE CHECKED) TO -1.
00002928                          2254                      *EASIER TO START AT -1 AND INCREMENT AN EXTRA TIME.
00002928  163C 00FF               2255                      MOVE.B #-1,D3
0000292C                          2256                      *PRINT "$"
0000292C  43F9 00002B9C           2257                      LEA DOLLAR_TEXT,A1
00002932  103C 000E               2258                      MOVE.B #14,D0
00002936  4E4F                    2259                      TRAP #15
00002938                          2260                      *PREPARE FOR CHAR OUTPUT
00002938  103C 0006               2261                      MOVE.B #6,D0
0000293C                          2262                      
0000293C                          2263                      *SPECIAL CASE: VALUE==0 -> PRINT 0
0000293C  B4BC 00000000           2264                      CMP.L #0,D2
00002942  6600 0010               2265                      BNE PH_LEADING_ZEROS
00002946  43F9 00002B8A           2266                      LEA HEX_DIGITS,A1 *A1 POINTS TO 0 ALREADY, SO NO NEED TO ADD ANYTHING TO IT.
0000294C  1211                    2267                      MOVE.B (A1),D1
0000294E  4E4F                    2268                      TRAP #15
00002950  6000 002E               2269                      BRA PH_CLEANUP
00002954                          2270                      
00002954                          2271  PH_LEADING_ZEROS    *STARTING FROM LARGEST NIBBLE OF D1 AND GOING SMALLER EACH TIME, INCREMENT PAST LEADING 0'S.
00002954  5203                    2272                      ADDQ.B #1,D3 *INCREMENT NUMBER OF BYTES WE'VE CHECKED. DOES IT ONE EXTRA TIME, WHICH IS ACCOUNTED
00002956                          2273                                   *ABOVE BY STARTING COUNTER AT -1.
00002956  E99A                    2274                      ROL.L #4,D2
00002958  1202                    2275                      MOVE.B D2,D1
0000295A  C23C 000F               2276                      AND.B #$0F,D1 *CHANGE LARGER NIBBLE OF D1.B TO 0 SO WE'RE JUST WORKING WITH THE SMALLER NIBBLE.
0000295E  B23C 0000               2277                      CMP.B #0,D1
00002962  67F0                    2278                      BEQ PH_LEADING_ZEROS
00002964                          2279                      
00002964                          2280  PH_PRINT_LOOP       *PRINT EACH NIBBLE UNTIL WE'VE DONE THE WHOLE LONG
00002964  1202                    2281                      MOVE.B D2,D1
00002966  C23C 000F               2282                      AND.B #$0F,D1 *CHANGE LARGER NIBBLE OF D1.B TO 0 SO WE'RE JUST WORKING WITH THE SMALLER NIBBLE.
0000296A                          2283                      
0000296A                          2284                      *NOW THAT WE'VE ISOLATED THE NIBBLE IN D1, PRINT IT.
0000296A  43F9 00002B8A           2285                      LEA HEX_DIGITS,A1 *A1 POINTS TO 0.
00002970  D3C1                    2286                      ADDA.L D1,A1 *MOVE A1 TO DIGIT WE WANT TO PRINT.
00002972  1211                    2287                      MOVE.B (A1),D1
00002974  4E4F                    2288                      TRAP #15
00002976                          2289                      
00002976                          2290                      *ROTATE IN NEXT NIBBLE, INCREMENT NIBBLE COUNTER, AND LOOP AGAIN,
00002976                          2291                      *UNLESS WE'VE ALREADY DONE THE WHOLE LONG, IN WHICH CASE WE'RE DONE.
00002976  E99A                    2292                      ROL.L #4,D2
00002978  5203                    2293                      ADDQ.B #1,D3
0000297A  B63C 0008               2294                      CMP.B #NIBBLES_PER_LONG_CONST,D3
0000297E  66E4                    2295                      BNE PH_PRINT_LOOP
00002980                          2296                      
00002980  4CDF 000C               2297  PH_CLEANUP          MOVEM.L (SP)+,D2/D3
00002984  4E75                    2298                      RTS
00002986                          2299                      
00002986                          2300                      *PRINT THE NEXT BYTE FROM THE SOURCE CODE (AND INCREMENT A6)
00002986                          2301                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE CODE, OR LEAVE AN ADDRESS INVALID FOR WORD ACCESS
00002986                          2302                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
00002986                          2303                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
00002986                          2304                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
00002986  7200                    2305  PRINT_BYTE          MOVE.L #0,D1 *CLEAR OUT D1.L FOR OUTPUT.
00002988  121E                    2306                      MOVE.B (A6)+,D1
0000298A  4EB8 2920               2307                      JSR PRINT_HEX
0000298E  4E75                    2308                      RTS
00002990                          2309  
00002990                          2310  
00002990                          2311                      
00002990                          2312                      *PRINT THE NEXT WORD FROM THE SOURCE CODE (AND INCREMENT A6)
00002990                          2313                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE CODE
00002990                          2314                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
00002990                          2315                      *USES D1.L. UNKNOWN WHEN THIS RETURNS.
00002990                          2316                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
00002990  7200                    2317  PRINT_WORD          MOVE.L #0,D1 *CLEAR OUT LARGER WORD OF D1 FOR OUTPUT.
00002992  321E                    2318                      MOVE.W (A6)+,D1
00002994  4EB8 2920               2319                      JSR PRINT_HEX                    
00002998  4E75                    2320                      RTS
0000299A                          2321                      
0000299A                          2322                      *PRINT THE NEXT LONG FROM THE SOURCE CODE (AND INCREMENT A6)
0000299A                          2323                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE CODE
0000299A                          2324                       *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
0000299A                          2325                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
0000299A                          2326                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
0000299A                          2327  PRINT_LONG          *READ THE NEXT LONG INTO D1, ONE WORD AT A TIME.
0000299A  321E                    2328                      MOVE.W (A6)+,D1
0000299C  E189                    2329                      LSL.L #8,D1
0000299E  E189                    2330                      LSL.L #8,D1
000029A0  321E                    2331                      MOVE.W (A6)+,D1
000029A2  4EB8 2920               2332                      JSR PRINT_HEX
000029A6  4E75                    2333                      RTS 
000029A8                          2334  
000029A8                          2335                      *PRINT THE NEXT WORD OR LONG IMMEDIATE FROM SOURCE CODE, DEPENDING ON SIZE
000029A8                          2336                      *SIZE CODE SHOULD BE STORED IN D3
000029A8                          2337                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE
000029A8                          2338                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
000029A8                          2339                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
000029A8                          2340                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
000029A8                          2341  PRINT_IMM           *PRINT_LONG_IMM IF LONG; OTHERWISE PRINT BYTE_IMM
000029A8  B63C 0002               2342                      CMP.B #LONG_CODE,D3
000029AC  6700 002A               2343                      BEQ PRINT_LONG_IMM
000029B0  6000 0014               2344                      BRA PRINT_WORD_IMM
000029B4                          2345  
000029B4                          2346                      *PRINT THE NEXT BYTE FROM THE SOURCE CODE AS A BYTE IMMEDIATE (AND INCREMENT A6)
000029B4                          2347                      *I KNOW THERE'S NO SUCH THING AS A WORD IMMEDIATE, BUT IT'S STILL USEFUL, BECAUSE SOMETIMES VALUES WRITTEN AS IMMEDIATES ARE STORED AS BYTES
000029B4                          2348                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE
000029B4                          2349                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
000029B4                          2350                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS
000029B4                          2351                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS
000029B4  43F9 00002B9A           2352  PRINT_BYTE_IMM      LEA POUND_TEXT,A1
000029BA  103C 000E               2353                      MOVE.B #14,D0
000029BE  4E4F                    2354                      TRAP #15
000029C0  4EB8 2986               2355                      JSR PRINT_BYTE
000029C4  4E75                    2356                      RTS 
000029C6                          2357                      
000029C6                          2358  
000029C6                          2359  
000029C6                          2360                      *PRINT THE NEXT WORD FROM THE SOURCE CODE AS A WORD IMMEDIATE (AND INCREMENT A6)
000029C6                          2361                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE CODE
000029C6                          2362                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS.
000029C6                          2363                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
000029C6                          2364                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS.
000029C6  43F9 00002B9A           2365  PRINT_WORD_IMM      LEA POUND_TEXT,A1
000029CC  103C 000E               2366                      MOVE.B #14,D0
000029D0  4E4F                    2367                      TRAP #15
000029D2  4EB8 2990               2368                      JSR PRINT_WORD
000029D6  4E75                    2369                      RTS
000029D8                          2370                      
000029D8                          2371                      *PRINT THE NEXT LONG FROM THE SOURCE CODE AS A LONG IMMEDIATE (AND INCREMENT A6)
000029D8                          2372                      *CALLER'S RESPONSIBILITY NOT TO RUN PAST END OF SOURCE CODE
000029D8                          2373                      *USES D1.L. UNKNOWN VALUE WHEN THIS RETURNS
000029D8                          2374                      *USES D0.B. VALUE WILL BE 6 WHEN THIS RETURNS.
000029D8                          2375                      *USES A1.L. UNKNOWN VALUE WHEN THIS RETURNS
000029D8  43F9 00002B9A           2376  PRINT_LONG_IMM      LEA POUND_TEXT,A1
000029DE  103C 000E               2377                      MOVE.B #14,D0
000029E2  4E4F                    2378                      TRAP #15
000029E4  4EB8 299A               2379                      JSR PRINT_LONG
000029E8  4E75                    2380                      RTS
000029EA                          2381                      
000029EA                          2382                      *PRINT THE NAME OF A D-REGISTER CORRESPONDING TO THE VALUE IN D1.L
000029EA                          2383                      *USES D0.B. VALUE WILL BE 3 WHEN THIS RETURNS.
000029EA                          2384                      *USES A1. WILL POINT TO "D" WHEN THIS RETURNS.
000029EA  43F9 00002BA0           2385  PRINT_DN            LEA D_TEXT,A1
000029F0  103C 000E               2386                      MOVE.B #14,D0
000029F4  4E4F                    2387                      TRAP #15
000029F6  103C 0003               2388                      MOVE.B #3,D0
000029FA  4E4F                    2389                      TRAP #15
000029FC  4E75                    2390                      RTS
000029FE                          2391                      
000029FE                          2392                      *PRINT THE NAME OF AN A-REGISTER CORRESPONDING TO THE VALUE IN D1.L
000029FE                          2393                      *USES D0.B. VALUE WILL BE 3 WHEN THIS RETURNS.
000029FE                          2394                      *USES A1. WILL POINT TO "A" WHEN THIS RETURNS.
000029FE  43F9 00002BA2           2395  PRINT_AN            LEA A_TEXT,A1
00002A04  103C 000E               2396                      MOVE.B #14,D0
00002A08  4E4F                    2397                      TRAP #15
00002A0A  103C 0003               2398                      MOVE.B #3,D0
00002A0E  4E4F                    2399                      TRAP #15
00002A10  4E75                    2400                      RTS
00002A12                          2401                      
00002A12                          2402                      *PRINT THE NAME OF AN A-REGISTER CORRESPONDING TO THE VALUE IN D1.L, IN PARENTHESES
00002A12                          2403                      *USES D0.B. VALUE WILL BE 14 WHEN THIS RETURNS.
00002A12                          2404                      *USES A1. WILL POINT TO ")" WHEN THIS RETURNS.
00002A12  43F9 00002BA4           2405  PRINT_PAREN_AN      LEA OPEN_PAREN_A_TEXT,A1
00002A18  103C 000E               2406                      MOVE.B #14,D0
00002A1C  4E4F                    2407                      TRAP #15
00002A1E  103C 0003               2408                      MOVE.B #3,D0
00002A22  4E4F                    2409                      TRAP #15
00002A24  43F9 00002BA7           2410                      LEA CLOSE_PAREN_TEXT,A1
00002A2A  103C 000E               2411                      MOVE.B #14,D0
00002A2E  4E4F                    2412                      TRAP #15
00002A30  4E75                    2413                      RTS
00002A32                          2414                      
00002A32                          2415                      *PRINT THE NAME OF AN A-REGISTER CORRESPONDING TO THE VALUE IN D1.L, IN PARENTHESES WITH POST-INCREMENT
00002A32                          2416                      *USES D0.B. VALUE WILL BE 14 WHEN THIS RETURNS.
00002A32                          2417                      *USES A1. WILL POINT TO ")+" WHEN THIS RETURNS.
00002A32  43F9 00002BA4           2418  PRINT_AN_POST_INC   LEA OPEN_PAREN_A_TEXT,A1
00002A38  103C 000E               2419                      MOVE.B #14,D0
00002A3C  4E4F                    2420                      TRAP #15
00002A3E  103C 0003               2421                      MOVE.B #3,D0
00002A42  4E4F                    2422                      TRAP #15
00002A44  43F9 00002BAD           2423                      LEA CLOSE_PAREN_PLUS_TEXT,A1
00002A4A  103C 000E               2424                      MOVE.B #14,D0
00002A4E  4E4F                    2425                      TRAP #15
00002A50  4E75                    2426                      RTS
00002A52                          2427                      
00002A52                          2428                      *PRINT THE NAME OF AN A-REGISTER CORRESPONDING TO THE VALUE IN D1.L, IN PARENTHESES WITH PRE-DECREMENT
00002A52                          2429                      *USES D0.B. VALUE WILL BE 14 WHEN THIS RETURNS.
00002A52                          2430                      *USES A1. WILL POINT TO ")" WHEN THIS RETURNS.
00002A52  43F9 00002BA9           2431  PRINT_AN_PRE_DEC    LEA MINUS_OPEN_PAREN_A_TEXT,A1
00002A58  103C 000E               2432                      MOVE.B #14,D0
00002A5C  4E4F                    2433                      TRAP #15
00002A5E  103C 0003               2434                      MOVE.B #3,D0
00002A62  4E4F                    2435                      TRAP #15
00002A64  43F9 00002BA7           2436                      LEA CLOSE_PAREN_TEXT,A1
00002A6A  103C 000E               2437                      MOVE.B #14,D0
00002A6E  4E4F                    2438                      TRAP #15
00002A70  4E75                    2439                      RTS
00002A72                          2440                      
00002A72                          2441  PRINT_NEXT_LINE     *PRINTS A CARRIAGE RETURN AND A LINE FEED
00002A72  43F9 00002C8A           2442                      LEA CRLF,A1
00002A78  103C 000E               2443                      MOVE.B #14,D0
00002A7C  4E4F                    2444                      TRAP #15
00002A7E  4E75                    2445                      RTS
00002A80                          2446                      
00002A80                          2447                      *PRINTS THE CORRESPONDING TOKEN GIVEN A REGISTER NUMBER, ADDRESSING MODE, AND SIZE.
00002A80                          2448                      *READS ADDITIONAL WORDS FROM SOURCE IF NECESSARY (LITERALS).
00002A80                          2449                      *REGISTER NUMBER SHOULD BE IN D1.L.
00002A80                          2450                      *ADDRESSING MODE SHOULD BE IN D2.B.
00002A80                          2451                      *SIZE SHOULD BE IN D3.B. (UNNECESSARY IF YOU KNOW IT WON'T BE AN IMMEDIATE).
00002A80                          2452                      *USES A1.L. UNPREDICTABLE VALUE WILL BE STORED IN A1.L WHEN THIS RETURNS.
00002A80                          2453                      *USES D0.B. UNPREDICTABLE VALUE WILL BE STORED IN D0.B WHEN THIS RETURNS.
00002A80                          2454                      *USES D1.L. UNPREDICTABLE VALUE WILL BE STORED IN D1.L WHEN THIS RETURNS.
00002A80                          2455  PRINT_TOKEN         *CHECK EA MODE TO PRINT TOKEN ACCORDINGLY
00002A80  B43C 0000               2456                      CMP.B #DATA_REGISTER_CONST,D2
00002A84  6700 004C               2457                      BEQ PT_DATA_REGISTER
00002A88  B43C 0001               2458                      CMP.B #ADDRESS_REGISTER_CONST,D2
00002A8C  6700 004A               2459                      BEQ PT_ADDRESS_REGISTER
00002A90  B43C 0002               2460                      CMP.B #NO_INC_DEC_CONST,D2
00002A94  6700 0048               2461                      BEQ PT_NO_INC_DEC
00002A98  B43C 0003               2462                      CMP.B #POST_INC_CONST,D2
00002A9C  6700 0046               2463                      BEQ PT_POST_INC
00002AA0  B43C 0004               2464                      CMP.B #PRE_DEC_CONST,D2
00002AA4  6700 0044               2465                      BEQ PT_PRE_DEC
00002AA8                          2466                      *ELSE LITERAL
00002AA8                          2467                      *CHECK WHETHER WORD ADDRESS, LONG ADDRESS, OR IMMEDIATE
00002AA8  B23C 0000               2468                      CMP.B #WORD_ADDRESS_CONST,D1
00002AAC  6700 0018               2469                      BEQ PT_WORD_ADDRESS
00002AB0  B23C 0001               2470                      CMP.B #LONG_ADDRESS_CONST,D1
00002AB4  6700 0016               2471                      BEQ PT_LONG_ADDRESS
00002AB8                          2472                      *ELSE IMMEDIATE
00002AB8  B63C 0002               2473                      CMP.B #LONG_CODE,D3 *CHECK IF LONG IMMEDIATE
00002ABC  6700 0032               2474                      BEQ PT_LONG_IMM
00002AC0                          2475                      *ELSE WORD IMMEDIATE
00002AC0  4EB8 29C6               2476                      JSR PRINT_WORD_IMM
00002AC4  4E75                    2477                      RTS
00002AC6  4EB8 2990               2478  PT_WORD_ADDRESS     JSR PRINT_WORD
00002ACA  4E75                    2479                      RTS
00002ACC  4EB8 299A               2480  PT_LONG_ADDRESS     JSR PRINT_LONG
00002AD0  4E75                    2481                      RTS
00002AD2  4EB8 29EA               2482  PT_DATA_REGISTER    JSR PRINT_DN
00002AD6  4E75                    2483                      RTS
00002AD8  4EB8 29FE               2484  PT_ADDRESS_REGISTER JSR PRINT_AN
00002ADC  4E75                    2485                      RTS
00002ADE  4EB8 2A12               2486  PT_NO_INC_DEC       JSR PRINT_PAREN_AN
00002AE2  4E75                    2487                      RTS
00002AE4  4EB8 2A32               2488  PT_POST_INC         JSR PRINT_AN_POST_INC
00002AE8  4E75                    2489                      RTS
00002AEA  4EB8 2A52               2490  PT_PRE_DEC          JSR PRINT_AN_PRE_DEC
00002AEE  4E75                    2491                      RTS
00002AF0  4EB8 29D8               2492  PT_LONG_IMM         JSR PRINT_LONG_IMM
00002AF4  4E75                    2493                      RTS
00002AF6                          2494  
00002AF6  FFFF FFFF               2495      SIMHALT             ; halt simulator
00002AFA                          2496  
00002AFA                          2497  * Put variables and constants here
00002AFA  =0000000A               2498  CR EQU $0A
00002AFA  =0000000D               2499  LF EQU $0D
00002AFA                          2500  
00002AFA= 00 00 00 00 00 00 ...   2501  CURRENT_WORD_ARRAY DC.B    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00002B0A= 4E71                    2502  TEST_NOOP1 DC.W %0100111001110001
00002B0C= 4E71                    2503  NOOP       DC.W $4E71
00002B0E                          2504  
00002B0E= 1203                    2505  TEST_MOVEB1 DC.W %0001001000000011   * MOVE.B D3,D1
00002B10= 1203                    2506  TEST_MOVEB2 DC.W $1203
00002B12                          2507  
00002B12= 203C 0001 2345          2508  TEST_MOVEL1 DC.W $203C,$0001,$2345 *MOVE.L #$12345,D0
00002B18                          2509  
00002B18= 3079 0001 2345          2510  TEST_MOVEAW1 DC.W $3079,$0001,$2345 *MOVEA.W $12345,A0
00002B1E                          2511  
00002B1E= 303C 1234               2512  TEST_MOVEW1 DC.W $303C,$1234 *MOVE.W #$1234,D0
00002B22= 4891 0003               2513  TEST_MOVEM  DC.W $4891,$0003 *MOVEM D0/D1, (A1)
00002B26= 4CB8 6000 0000          2514  TEST_MOVEM2 DC.W $4CB8,$6000,$0000 *MOVEM $0000, A5/A6
00002B2C= 4CB8 0015 1000          2515  TEST_MOVEM3 DC.W $4CB8,$0015,$1000 *MOVEM $1000, D0/D2/D4
00002B32= 4C94 0002               2516  TEST_MOVEM4 DC.W $4C94,$0002        *MOVEM (A4), D1
00002B36                          2517  
00002B36= 60FC                    2518  TEST_BRA    DC.W $60FC
00002B38= 6000 0010               2519  TEST_BRA2   DC.W $6000,$0010
00002B3C= 6000 000E               2520  TEST_BRA3   DC.W $6000,$000E
00002B40= 60D8                    2521  TEST_BRA4   DC.W $60D8
00002B42                          2522  
00002B42= 4446                    2523  TEST_NEG    DC.W $4446
00002B44= 0C78 03E8 2000          2524  TEST_CMPI   DC.W $0C78,$03E8,$2000
00002B4A= 0078 03E8 2000          2525  TEST_ORI    DC.W $0078,$03E8,$2000
00002B50= 4E 4F 50 00             2526  NOOP_T      DC.B    'NOP',0
00002B54= C5FC 0064               2527  TEST_MULS   DC.W $C5FC,$0064
00002B58= 83FC 0064               2528  TEST_DIVS   DC.W $83FC,$0064
00002B5C= 8278 1000               2529  TEST_OR     DC.W $8278,$1000
00002B60= 8278 1000               2530  TEST_OR2    DC.W $8278,$1000
00002B64= 8238 1000               2531  TEST_OR3    DC.W $8238,$1000
00002B68= 8338 1000               2532  TEST_OR4    DC.W $8338,$1000
00002B6C= 43F9 0000 100A          2533  TEST_LEA    DC.W $43F9,$0000,$100A
00002B72= 5941                    2534  TEST_SUBQ   DC.W $5941
00002B74                          2535  
00002B74= 4E71                    2536  TEST_CODE   DC.W    $4E71
00002B76                          2537  
00002B76= 303C 1234 0C78 0...     2538  TEST_BLOCK  DC.W $303C,$1234,$0C78,$03E8,$2000,$8278,$1000,$3079,$0001,$2345
00002B8A                          2539  
00002B8A                          2540  
00002B8A                          2541  *****TEXT
00002B8A                          2542  
00002B8A= 30 31 32 33 34 35 ...   2543  HEX_DIGITS DC.B '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
00002B9A                          2544  
00002B9A                          2545  
00002B9A                          2546  
00002B9A                          2547  *CHARACTERS
00002B9A= 23 00                   2548  POUND_TEXT DC.B '#',0
00002B9C= 24 00                   2549  DOLLAR_TEXT DC.B '$',0
00002B9E= 2C 00                   2550  COMMA_TEXT DC.B ',',0
00002BA0= 44 00                   2551  D_TEXT DC.B 'D',0
00002BA2= 41 00                   2552  A_TEXT DC.B 'A',0
00002BA4= 28 41 00                2553  OPEN_PAREN_A_TEXT DC.B '(A',0
00002BA7= 29 00                   2554  CLOSE_PAREN_TEXT DC.B ')',0
00002BA9= 2D 28 41 00             2555  MINUS_OPEN_PAREN_A_TEXT DC.B '-(A',0
00002BAD= 29 2B 00                2556  CLOSE_PAREN_PLUS_TEXT DC.B ')+',0
00002BB0= 2F 00                   2557  SLASH_TEXT  DC.B '/',0
00002BB2= 20 00                   2558  SPACE_TEXT  DC.B ' ',0
00002BB4                          2559  
00002BB4                          2560  *SIZE
00002BB4= 2E 42 20 00             2561  BYTE_TEXT DC.B '.B ',0
00002BB8= 2E 57 20 00             2562  WORD_TEXT DC.B '.W ',0
00002BBC= 2E 4C 20 00             2563  LONG_TEXT DC.B '.L ',0
00002BC0                          2564  
00002BC0                          2565  *OPERATION
00002BC0= 41 44 44 00             2566  ADD_TEXT    DC.B    'ADD',0
00002BC4= 41 44 44 41 00          2567  ADDA_TEXT   DC.B    'ADDA',0
00002BC9= 41 44 44 49 00          2568  ADDI_TEXT   DC.B    'ADDI',0
00002BCE= 41 44 44 51 00          2569  ADDQ_TEXT   DC.B    'ADDQ',0
00002BD3= 41 53 52 00             2570  ASR_TEXT    DC.B    'ASR',0
00002BD7= 41 53 4C 00             2571  ASL_TEXT    DC.B    'ASL',0
00002BDB= 42 48 49 00             2572  BHI_TEXT    DC.B    'BHI',0
00002BDF= 42 4C 4F 00             2573  BLO_TEXT    DC.B    'BLO',0
00002BE3= 42 45 51 00             2574  BEQ_TEXT    DC.B    'BEQ',0
00002BE7= 42 47 45 00             2575  BGE_TEXT    DC.B    'BGE',0
00002BEB= 42 47 54 00             2576  BGT_TEXT    DC.B    'BGT',0
00002BEF= 42 43 53 00             2577  BCS_TEXT    DC.B    'BCS',0
00002BF3= 42 4C 45 00             2578  BLE_TEXT    DC.B    'BLE',0
00002BF7= 42 4C 53 00             2579  BLS_TEXT    DC.B    'BLS',0
00002BFB= 42 4C 54 00             2580  BLT_TEXT    DC.B    'BLT',0
00002BFF= 42 4D 49 00             2581  BMI_TEXT    DC.B    'BMI',0
00002C03= 42 4E 45 00             2582  BNE_TEXT    DC.B    'BNE',0
00002C07= 42 50 4C 00             2583  BPL_TEXT    DC.B    'BPL',0
00002C0B= 42 52 41 00             2584  BRA_TEXT    DC.B    'BRA',0
00002C0F= 42 56 43 00             2585  BVC_TEXT    DC.B    'BVC',0
00002C13= 42 56 53 00             2586  BVS_TEXT    DC.B    'BVS',0
00002C17= 42 43 4C 52 00          2587  BCLR_TEXT   DC.B    'BCLR',0
00002C1C= 43 4D 50 00             2588  CMP_TEXT    DC.B    'CMP',0
00002C20= 43 4D 50 41 00          2589  CMPA_TEXT   DC.B    'CMPA',0
00002C25= 43 4D 50 49 00          2590  CMPI_TEXT   DC.B    'CMPI',0
00002C2A= 44 41 54 41 20 00       2591  DATA_TEXT   DC.B    'DATA ',0
00002C30= 44 49 56 53 00          2592  DIVS_TEXT   DC.B    'DIVS',0
00002C35= 45 4F 52 00             2593  EOR_TEXT    DC.B    'EOR',0
00002C39= 4A 53 52 00             2594  JSR_TEXT    DC.B    'JSR',0
00002C3D= 4C 45 41 00             2595  LEA_TEXT    DC.B    'LEA',0
00002C41= 4C 53 4C 00             2596  LSL_TEXT    DC.B    'LSL',0
00002C45= 4C 53 52 00             2597  LSR_TEXT    DC.B    'LSR',0
00002C49= 4D 4F 56 45 00          2598  MOVE_TEXT   DC.B    'MOVE',0
00002C4E= 4D 4F 56 45 41 00       2599  MOVEA_TEXT  DC.B    'MOVEA',0
00002C54= 4D 4F 56 45 4D 00       2600  MOVEM_TEXT  DC.B    'MOVEM',0
00002C5A= 4D 55 4C 53 00          2601  MULS_TEXT   DC.B    'MULS',0
00002C5F= 4E 45 47 00             2602  NEG_TEXT    DC.B    'NEG',0
00002C63= 4F 52 00                2603  OR_TEXT     DC.B    'OR',0
00002C66= 4F 52 49 00             2604  ORI_TEXT    DC.B    'ORI',0
00002C6A= 52 4F 52 00             2605  ROR_TEXT    DC.B    'ROR',0
00002C6E= 52 4F 4C 00             2606  ROL_TEXT    DC.B    'ROL',0
00002C72= 52 54 53 00             2607  RTS_TEXT    DC.B    'RTS',0
00002C76= 53 55 42 00             2608  SUB_TEXT    DC.B    'SUB',0
00002C7A= 53 55 42 41 00          2609  SUBA_TEXT   DC.B    'SUBA',0
00002C7F= 53 55 42 49 00          2610  SUBI_TEXT   DC.B    'SUBI',0
00002C84= 53 55 42 51 00          2611  SUBQ_TEXT   DC.B    'SUBQ',0
00002C89                          2612  
00002C89                          2613  *******LOOP VARIABLES***********
00002C89                          2614  
00002C89= 14                      2615  COUNTER DC.B     20
00002C8A= 0D 0A 00                2616  CRLF    DC.B    $D,$A,0         carriage return & line feed, null
00002C8D= 2D 2D 2D 2D 2D 2D ...   2617  TEST2    DC.B    '---------------------------------',CR,LF,0
00002CB1= 45 6E 74 65 72 20 ...   2618  PROMPT1 DC.B    'Enter start address of array = ',0
00002CD1= 45 6E 74 65 72 20 ...   2619  PROMPT2 DC.B    'Enter end address of array = ',0
00002CEF= 50 72 65 73 73 20 ...   2620  PROMPT3 DC.B    'Press any key to display next page, 1 for terminate',CR,LF,0
00002D26= 00000000 00000000       2621  REGISTER_STORAGE   DC.L    0,0
00002D2E= 8178 4000               2622  TEST    DC.W    $8178,$4000
00002D32                          2623    
00002D32                          2624  *$8239,$FF02,$AB89
00002D32                          2625  
00002D32                          2626  
00002D32= E326 E366 E3A6 E...     2627  ASD_TEST DC.W $E326,$E366,$E3A6,$E106,$E146,$E186,$E1F9,$FF02,$AB89,$E226,$E266,$E2A6,$E006,$E046,$E086,$E0F9,$FF02,$AB89 *18 WORDS
00002D56= 0887 0000 03B9 F...     2628  BCLR_TEST DC.W $0887,$0000,$03B9,$FF02,$AB89,$03B9,$FF02,$AB89,$08B9,$0009,$FF02,$AB89,$08B9,$00FF,$FF02,$AB89  *16 WORDS 34 TOTAL
00002D76= 6500 2FFE 6500 2...     2629  BCC_TEST DC.W $6500,$2FFE,$6500,$2FFA,$6500,$2FF6,$6700,$2FF2,$6700,$2FEE,$6700,$2FEA,$6C00,$2FE6,$6C00,$2FE2,$6C00,$2FDE,$6E00,$2FDA,$6E00,$2FD6,$6E00,$2FD2,$6200,$2FCE,$6200,$2FCA,$6200,$2FC6,$6500,$2FC2,$6500,$2FBE,$6500,$2FBA,$6F00,$2FB6 
00002DC2= 6F00 2FB2 6F00 2...     2630  BCC2_TEST DC.W $6F00,$2FB2,$6F00,$2FAE,$6D00,$2FAA,$6D00,$2FA6,$6D00,$2FA2,$6300,$2F9E,$6300,$2F9A,$6300,$2F96,$6B00,$2F92,$6B00,$2F8E,$6B00,$2F8A,$6600,$2F86,$6600,$2F82 *26 WORDS 98 TOTAL
00002DF6= 6600 2F7E 6A00 2...     2631  BCC3_TEST DC.W $6600,$2F7E,$6A00,$2F7A,$6A00,$2F76,$6A00,$2F72,$6000,$2F6E,$6000,$2F6A,$6000,$2F66 *14 WORDS, 112 TOTAL
00002E12= 6800 2F62 6800 2...     2632  BCC4_TEST DC.W $6800,$2F62,$6800,$2F5E,$6800,$2F5A,$6900,$2F56,$6900,$2F52,$6900,$2F4E *12 words 124 total
00002E2A= BC01 BC41 BC81 B...     2633  CMP_TEST DC.W $BC01,$BC41,$BC81,$BC51,$B2B9,$10FC,$B901,$0C01,$0007,$0C41,$0FA0,$0C81,$0000,$0FA0,$0C16,$0007,$0C56,$0FA0,$0C96,$10FC,$B901 *21 words 145
00002E54= 83F9 10FC B901 8...     2634  DIVS_TEST DC.W $83F9,$10FC,$B901,$83F9,$FF02,$AB89 *6 words 151 total
00002E60= B346 B306 B346 B...     2635  EOR_TEST DC.W $B346,$B306,$B346,$B386,$B317,$B357,$B397,$B339,$FF02,$AB89,$B379,$FF02,$AB89,$B3B9,$FF02,$AB89,$B338,$0FA0,$B378,$0FA0,$B3B8,$0FA0 *22 words 173 total
00002E8C= 4EB8 1000 4E97 4...     2636  JSR_TEST DC.W $4EB8,$1000,$4E97,$4EB9,$FF02,$AB89,$4EB8,$0FA0 *8 words 181 total
00002E9C= 4DF9 FF02 AB89 4...     2637  LEA_TEST DC.W $4DF9,$FF02,$AB89,$4DF8,$03E8 *5 words 186 total
00002EA6= E32E E36E E3AE E...     2638  LSD_TEST DC.W $E32E,$E36E,$E3AE,$E10E,$E14E,$E18E,$E3F9,$FF02,$AB89,$E22E,$E26E,$E2AE,$E00E,$E04E,$E08E,$E2F9,$FF02,$AB89 *18 words, 204 words
00002ECA= 1C01 3C01 2C01 1...     2639  MOV_TEST DC.W $1C01,$3C01,$2C01,$1C3C,$0001,$3C3C,$03E8,$2C3C,$FF02,$AB89,$1C39,$FF02,$AB89,$3C39,$FF02,$AB89 *16 words, 220 words
00002EEA= 2C39 FF02 AB89 1...     2640  MOV2_TEST DC.W $2C39,$FF02,$AB89,$13F9,$FF02,$AB89,$EF02,$AB89,$33F9,$FF02,$AB89,$EF02,$AB89,$23F9,$FF02,$AB89,$EF02,$AB89,$3C0B,$2C0B,$1C1D,$3C1D,$2C1D,$1F18,$3F18,$2F18 *26 words 246
00002F1E= 3C41 2C41 3C7C 0...     2641  MOVEA_TEST DC.W $3C41,$2C41,$3C7C,$03E8,$2C7C,$FF02,$AB89,$3C79,$FF02,$AB89,$2C79,$FF02,$AB89,$3C4B,$2C4B,$3C5D,$2C5D,$3C67,$2C67 *19 words, 265 total
00002F44= 48B9 FFFF FF02 A...     2642  MOVEM_TEST DC.W $48B9,$FFFF,$FF02,$AB89,$48F9,$FFFF,$FF02,$AB89,$4CB9,$FFFF,$FF02,$AB89,$4CF9,$FFFF,$FF02,$AB89 *16 words 281 total
00002F64= C3F9 FF02 AB89 C...     2643  MULUS_TEST DC.W $C3F9,$FF02,$AB89,$C3FC,$0FA0 *5 words 286 total
00002F6E= 4401 4441 4481 4...     2644  NEG_TEST DC.W $4401,$4441,$4481,$4411,$4451,$4491,$4439,$FF02,$AB89,$4479,$FF02,$AB89,$44B9,$FF02,$AB89,$4427,$4467,$44A7,$441D,$445D,$449D *21 words 307 total
00002F98= 8C01 8C41 8C81 8...     2645  OR_TEST DC.W $8C01,$8C41,$8C81,$8239,$FF02,$AB89,$8279,$FF02,$AB89,$82B9,$FF02,$AB89,$8215,$8255,$8295,$821D,$825D,$829D,$823C,$0007,$827C,$0FA0,$82B9,$FF02,$AB89
00002FCA= 0001 0007 0041 0...     2646  ORI_TEST DC.W $0001,$0007,$0041,$0FA0,$0081,$FF02,$AB89,$0039,$0007,$FF02,$AB89,$0079,$0FA0,$FF02,$AB89,$00B9,$FE02,$AB89,$FF02,$AB89,$0016,$0007,$0056,$0FA0,$0096,$FF02,$AB89,$001E,$0007,$005E,$0FA0,$009E,$FF02,$AB89 *34 words, 341 total
0000300E= E33E E37E E3BE E...     2647  ROD_TEST DC.W $E33E,$E37E,$E3BE,$E11E,$E15E,$E19E,$E7F9,$FF02,$AB89,$E23E,$E27E,$E2BE,$E01E,$E05E,$E09E,$E6F9,$FF02,$AB89 *18 words, 359 total
00003032= 9C01 9C41 9C81 5...     2648  SUB_TEST DC.W $9C01,$9C41,$9C81,$5106,$5146,$5186,$9CC1,$9CC1,$925F,$9567,$9C49,$9C89,$9379,$FF02,$AB89 *15 words 374 total
00003050= 5106 5146 5186 5...     2649  SUBQ_TEST DC.W $5106,$5146,$5186,$5139,$FF02,$AB89,$5179,$FF02,$AB89,$51B9,$FF02,$AB89 *12 words 386 total
00003068                          2650      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_TEXT           2BC4
ADDI_TEXT           2BC9
ADDQ_TEXT           2BCE
ADDRESS_REGISTER_CONST  1
ADDSUB_CHECK_EA     2004
ADDSUB_LITERAL      201E
ADDSUB_UNSUPPORTED  2034
ADD_BYTE_TO_DN      1CBA
ADD_BYTE_TO_EA      1D3E
ADD_CLEANUP         1DC8
ADD_CONST           D
ADD_LONG_TO_DN      1D12
ADD_LONG_TO_EA      1D9A
ADD_TEXT            2BC0
ADD_WORD_TO_AN      1C8A
ADD_WORD_TO_DN      1CE6
ADD_WORD_TO_EA      1D6C
ASD_TEST            2D32
ASL_ASR_BYTE_CONST  0
ASL_ASR_LONG_CONST  2
ASL_ASR_REG_BYTE    2306
ASL_ASR_REG_CONST   E
ASL_ASR_REG_DEST    234E
ASL_ASR_REG_SIZE    22E6
ASL_ASR_REG_WORD    2316
ASL_ASR_WORD_CONST  1
ASL_MEM_CONST       387
ASL_REG             227A
ASL_TEXT            2BD7
ASR_MEM_CONST       383
ASR_TEXT            2BD3
ASX_CHANGE_ZERO     2368
ASX_INVALID_SIZE    236E
ASX_MEM_CVALID      139E
ASX_MEM_INVALID     13D4
ASX_MEM_LITERAL     13DE
ASX_MEM_UNSUPPORTED  13CE
ASX_MEM_VALID       13DC
ASX_REG_IR_EQU_ONE  2348
ASX_REG_OPERANDS    2326
ASX_REG_P_SHIFT_C   2336
A_TEXT              2BA2
BATI_CLEANUP        290E
BATI_LOOP           28FA
BCC2_TEST           2DC2
BCC3_TEST           2DF6
BCC4_TEST           2E12
BCC_DISP_BYTE       19EC
BCC_DISP_LONG       1A28
BCC_DISP_WORD       19FC
BCC_DISP_WORD_NEG   1A0A
BCC_DISP_WORD_POS   1A1A
BCC_TEST            2D76
BCLRS_BAD_MODE      1482
BCLRS_LITERAL       146A
BCLR_DYNAMIC_CONST  0
BCLR_STATIC_CONST   22
BCLR_TEST           2D56
BCLR_TEXT           2C17
BCS_CONST           65
BCS_TEXT            2BEF
BEQ_CONST           67
BEQ_TEXT            2BE3
BGE_CONST           6C
BGE_TEXT            2BE7
BGT_CONST           6E
BGT_TEXT            2BEB
BHI_CONST           62
BHI_TEXT            2BDB
BITARR_TO_INT       28F2
BLE_CONST           6F
BLE_TEXT            2BF3
BLO_TEXT            2BDF
BLS_CONST           63
BLS_TEXT            2BF7
BLT_CONST           6D
BLT_TEXT            2BFB
BMI_CONST           6B
BMI_TEXT            2BFF
BNE_CONST           66
BNE_TEXT            2C03
BPL_CONST           6A
BPL_TEXT            2C07
BRA_CONST           60
BRA_TEXT            2C0B
BVC_CONST           68
BVC_TEXT            2C0F
BVS_CONST           69
BVS_TEXT            2C13
BYTES_PER_LONG_CONST  4
BYTE_CODE           0
BYTE_TEXT           2BB4
BYTE_TO_DN_CONST    0
BYTE_TO_EA_CONST    4
CHECK_ADD           1BF0
CHECK_ADD_RET       1266
CHECK_ASL_ASR_REG   2202
CHECK_ASL_ASR_RET   1276
CHECK_ASL_MEM       130A
CHECK_ASR_MEM       1354
CHECK_ASX_MEM_RET   114E
CHECK_BCLRS_RET     1156
CHECK_BCLR_DYNAMIC  2502
CHECK_BCLR_STATIC   13F2
CHECK_BCS_CONST     1870
CHECK_BEQ_CONST     17FE
CHECK_BGE_CONST     1824
CHECK_BGT_CONST     184A
CHECK_BHI_CONST     17B2
CHECK_BLE_CONST     1896
CHECK_BLO_CONST     17D8
CHECK_BLS_CONST     18BC
CHECK_BLT_CONST     18E2
CHECK_BMI_CONST     1908
CHECK_BNE_CONST     192E
CHECK_BPL_CONST     1954
CHECK_BRA_CONST     178C
CHECK_BVC_CONST     197A
CHECK_BVS_CONST     19A0
CHECK_CMPI_CONST    1ABC
CHECK_CMP_EOR       203A
CHECK_CMP_EOR_RET   127E
CHECK_DIVS_OR_CONST  2574
CHECK_JSR           1488
CHECK_JSR_RET       115E
CHECK_LEA_CONST     272A
CHECK_LSL_MEM       151E
CHECK_LSL_MEM_RET   1166
CHECK_LSR_MEM       1562
CHECK_LSR_MEM_RET   116E
CHECK_MOVE          2374
CHECK_MOVEM_MEM_TO_REG  16BA
CHECK_MOVEM_MTR_RET  119A
CHECK_MOVEM_REG_TO_MEM  163A
CHECK_MOVEM_RTM_RET  1192
CHECK_MOVE_RET      12C6
CHECK_MULS_WORD_CONST  2490
CHECK_NEG_CONST     1A3A
CHECK_ORI_CONST     1B62
CHECK_ROL_MEM       15AA
CHECK_ROL_MEM_RET   1176
CHECK_ROR_MEM       15F2
CHECK_ROR_MEM_RET   117E
CHECK_SUB           1DFC
CHECK_SUBQ_CONST    279C
CHECK_SUB_RET       126E
CLOSE_PAREN_PLUS_TEXT  2BAD
CLOSE_PAREN_TEXT    2BA7
CMPA_TEXT           2C20
CMPI_CONST          C
CMPI_CONT           1B34
CMPI_PRINT_BYTE     1B04
CMPI_PRINT_LONG     1B24
CMPI_PRINT_WORD     1B14
CMPI_TEXT           2C25
CMP_BYTE_TO_DN      20B6
CMP_CHECK_LIT       2182
CMP_EOR_CONST       B
CMP_EOR_INVALID     2192
CMP_LONG_TO_AN      20E6
CMP_LONG_TO_DN      20CE
CMP_PRINT_BYTE      213E
CMP_PRINT_LONG      2156
CMP_PRINT_SIZE      2126
CMP_PRINT_WORD      214A
CMP_PROCESS         2076
CMP_SOURCE          215E
CMP_TEST            2E2A
CMP_TEXT            2C1C
CMP_WORD_TO_AN      20DA
CMP_WORD_TO_DN      20C2
COMMA_TEXT          2B9E
COUNTER             2C89
CR                  A
CRLF                2C8A
CURRENT_WORD_ARRAY  2AFA
D16_AN_CONST        5
D16_PC_CONST        2
D8_AN_XN_CONST      6
D8_PC_XN_CONST      3
DATA_REGISTER_CONST  0
DATA_TEXT           2C2A
DISASSEMBLE_MAIN    10D8
DIVS_BRANCH         259C
DIVS_TEST           2E54
DIVS_TEXT           2C30
DIVS_WORD_CONST     8
DOLLAR_TEXT         2B9C
DONT_PRINT_SLASH    2890
DONT_PRINT_SLASHA   28DA
D_TEXT              2BA0
EOR                 219C
EOR_BYTE            20F2
EOR_LONG            2102
EOR_OPERANDS        21DA
EOR_PRINT_BYTE      21D2
EOR_PRINT_WORD      21C6
EOR_TEST            2E60
EOR_TEXT            2C35
EOR_WORD            20FA
EXIT                2700
EXIT_BCC_LOOP       1A38
EXIT_LOOP           10D4
FIX_ADDRESS2        176C
FIX_ADDRESS_MTR     1746
FIX_LONG            1758
FIX_LONG_ADD        177E
FIX_WORD            1752
FIX_WORD_ADD        1778
HANDLE_ADDRESS      1726
HEX_DIGITS          2B8A
IF_BRANCH           1012
IMMEDIATE_CONST     4
INPUT               10A0
IS_ASL_OR_ASR       2256
IS_LSL_OR_LSR       2286
IS_ROL_OR_ROR       22B6
JSR_CONST           13A
JSR_INVALID         1518
JSR_LITERAL         1500
JSR_TEST            2E8C
JSR_TEXT            2C39
JSR_UNRECOGNIZED    1514
LEA_CONST           4
LEA_TEST            2E9C
LEA_TEXT            2C3D
LF                  D
LITERAL_CONST       7
LONG_ADDRESS_CONST  1
LONG_CODE           2
LONG_TEXT           2BBC
LONG_TO_AN_CONST    7
LONG_TO_DN_CONST    2
LONG_TO_EA_CONST    6
LSD_TEST            2EA6
LSL_LSR_REG_CONST   E
LSL_MEM_CONST       38F
LSL_REG             22AA
LSL_TEXT            2C41
LSR_MEM_CONST       38B
LSR_TEXT            2C45
MINUS_OPEN_PAREN_A_TEXT  2BA9
MOV2_TEST           2EEA
MOVEA               23E8
MOVEA_TEST          2F1E
MOVEA_TEXT          2C4E
MOVEM_ALOOP_CONT    28EC
MOVEM_AREGS_EXIT    28F0
MOVEM_AREGS_LOOP    28AA
MOVEM_DLOOP_CONT    28A2
MOVEM_DREGS_EXIT    28A6
MOVEM_DREGS_LOOP    2860
MOVEM_MEM_TO_REG_CONST  99
MOVEM_MTR_LONG      170A
MOVEM_MTR_PROC_CONT  1716
MOVEM_MTR_WORD      16F8
MOVEM_REG_TO_MEM_CONST  91
MOVEM_RTM_LONG      1688
MOVEM_RTM_PROC_CONT  1694
MOVEM_RTM_WORD      1678
MOVEM_TEST          2F44
MOVEM_TEXT          2C54
MOVE_BYTE           2420
MOVE_BYTE_CONST     1
MOVE_CONST          0
MOVE_DEST_REG       244E
MOVE_INVALID        2486
MOVE_LONG_CONST     2
MOVE_OUTPUT         23D0
MOVE_SIZE           23F0
MOVE_SOURCE         242C
MOVE_SOURCE_LIT     23B8
MOVE_SOURCE_REG     246A
MOVE_TEXT           2C49
MOVE_WORD           2410
MOVE_WORD_CONST     3
MOV_TEST            2ECA
MTR_CONT            172C
MTR_CONT2           175A
MTR_CONT3           1780
MULS_TEXT           2C5A
MULS_WORD_CONST     C
MULUS_TEST          2F64
NEG_BYTE            1A82
NEG_CONST           44
NEG_CONT            1AA2
NEG_LONG            1A9A
NEG_TEST            2F6E
NEG_TEXT            2C5F
NEG_WORD            1A8E
NIBBLES_PER_LONG_CONST  8
NOOP                2B0C
NOOP_T              2B50
NOP_CONST           4E71
NO_INC_DEC_CONST    2
OPEN_PAREN_A_TEXT   2BA4
ORI_BYTE            1BAA
ORI_CONST           0
ORI_CONT            1BCA
ORI_LONG            1BC2
ORI_TEST            2FCA
ORI_TEXT            2C66
ORI_WORD            1BB6
OR_BRANCH           25F2
OR_BYTE             26CC
OR_BYTE1            2636
OR_CONST            8
OR_DN_EA            2694
OR_DN_EA_CONT       26FC
OR_EA_DN            25FE
OR_EA_DN_CONT       2666
OR_LONG             26EC
OR_LONG1            2656
OR_TEST             2F98
OR_TEXT             2C63
OR_WORD             26DC
OR_WORD1            2646
PAOAI_CLEANUP       1DF4
PH_CLEANUP          2980
PH_LEADING_ZEROS    2954
PH_PRINT_LOOP       2964
POST_INC_CONST      3
POUND_TEXT          2B9A
PRE_DEC_CONST       4
PRINT_ADD           1DEE
PRINT_ADD_OR_ADDI   1DD4
PRINT_AN            29FE
PRINT_AN_POST_INC   2A32
PRINT_AN_PRE_DEC    2A52
PRINT_AREGISTER     28C6
PRINT_BCLR_STATIC   142C
PRINT_BYTE          2986
PRINT_BYTE_IMM      29B4
PRINT_CMP           211E
PRINT_CMP_OR_CMPA   210A
PRINT_COMMA         2912
PRINT_COUNT         19
PRINT_DISSASSEMBLY  10CC
PRINT_DN            29EA
PRINT_DREGISTER     287C
PRINT_HEX           2920
PRINT_IMM           29A8
PRINT_JSR           14D6
PRINT_LONG          299A
PRINT_LONG_IMM      29D8
PRINT_MOVEM_DREGS   2856
PRINT_NEXT_LINE     2A72
PRINT_PAREN_AN      2A12
PRINT_SUB           1FF6
PRINT_SUB_OR_SUBI   1FDC
PRINT_TOKEN         2A80
PRINT_WORD          2990
PRINT_WORD_IMM      29C6
PROC_BCC_OUT        19C6
PROC_NOP            130A
PROC_RTS            130A
PROMPT1             2CB1
PROMPT2             2CD1
PROMPT3             2CEF
PROMPT_MESSAGE      1078
PSOSI_CLEANUP       1FFC
PT_ADDRESS_REGISTER  2AD8
PT_DATA_REGISTER    2AD2
PT_LONG_ADDRESS     2ACC
PT_LONG_IMM         2AF0
PT_NO_INC_DEC       2ADE
PT_POST_INC         2AE4
PT_PRE_DEC          2AEA
PT_WORD_ADDRESS     2AC6
REGISTER_STORAGE    2D26
ROD_TEST            300E
ROL_MEM_CONST       39F
ROL_REG             22DA
ROL_ROR_REG_CONST   E
ROL_TEXT            2C6E
ROR_MEM_CONST       39B
ROR_TEXT            2C6A
RTS_CONST           4E75
RTS_TEXT            2C72
SIXTEEN_BIT_DISP_CONST  0
SLASH_TEXT          2BB0
SPACE_TEXT          2BB2
START               1000
SUBA_TEXT           2C7A
SUBI_TEXT           2C7F
SUBQ_BYTE           27F2
SUBQ_CONST          5
SUBQ_CONT           2812
SUBQ_LONG           280A
SUBQ_PRINT_8        27B8
SUBQ_PROC_CONT      27BC
SUBQ_TEST           3050
SUBQ_TEXT           2C84
SUBQ_WORD           27FE
SUB_BYTE_TO_DN      1EC4
SUB_BYTE_TO_EA      1F48
SUB_CLEANUP         1FD0
SUB_CONST           9
SUB_LONG_TO_DN      1F1C
SUB_LONG_TO_EA      1FA6
SUB_TEST            3032
SUB_TEXT            2C76
SUB_WORD_TO_AN      1E96
SUB_WORD_TO_DN      1EF0
SUB_WORD_TO_EA      1F76
TEST                2D2E
TEST2               2C8D
TEST_BLOCK          2B76
TEST_BRA            2B36
TEST_BRA2           2B38
TEST_BRA3           2B3C
TEST_BRA4           2B40
TEST_CMPI           2B44
TEST_CODE           2B74
TEST_DIVS           2B58
TEST_LEA            2B6C
TEST_MOVEAW1        2B18
TEST_MOVEB1         2B0E
TEST_MOVEB2         2B10
TEST_MOVEL1         2B12
TEST_MOVEM          2B22
TEST_MOVEM2         2B26
TEST_MOVEM3         2B2C
TEST_MOVEM4         2B32
TEST_MOVEW1         2B1E
TEST_MULS           2B54
TEST_NEG            2B42
TEST_NOOP1          2B0A
TEST_OR             2B5C
TEST_OR2            2B60
TEST_OR3            2B64
TEST_OR4            2B68
TEST_ORI            2B4A
TEST_SUBQ           2B72
THIRTYTWO_BIT_DISP_CONST  FF
UNSUPPORTED_OP      12DE
WHILE_LOOP          103A
WORDS_PER_LONG_CONST  2
WORD_ADDRESS_CONST  0
WORD_CODE           1
WORD_SIZE_CONST     10
WORD_TEXT           2BB8
WORD_TO_AN_CONST    3
WORD_TO_DN_CONST    1
WORD_TO_EA_CONST    5
